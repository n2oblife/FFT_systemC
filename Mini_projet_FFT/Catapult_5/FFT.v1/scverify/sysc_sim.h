// ----------------------------------------------------------------------------
// SystemC SCVerify Flow -- sysc_sim.h
//
//    HLS version: 2022.2_1/1019737 Production Release
//       HLS date: Mon Nov 21 20:05:27 PST 2022
//  Flow Packages: HDL_Tcl 8.0a, SCVerify 10.4
//
//   Generated by: HLS_student@wifi-salsa-197.priv.enst-bretagne.fr
// Generated date: Tue Mar 14 16:02:11 CET 2023
//
// ----------------------------------------------------------------------------
#ifndef INCLUDED_SYSC_SIM_WRAPPER_H
#define INCLUDED_SYSC_SIM_WRAPPER_H
// 
// -------------------------------------
// sysc_sim_wrapper
// Represents a new SC_MODULE having the same interface as the original model FFT
// -------------------------------------
// 

#ifndef TO_QUOTED_STRING
#define TO_QUOTED_STRING(x) TO_QUOTED_STRING1(x)
#define TO_QUOTED_STRING1(x) #x
#endif
extern double __scv_hold_time;


#ifndef SC_USE_STD_STRING
#define SC_USE_STD_STRING
#endif

#include "../../CABA/fft.h"
#include <systemc.h>
#include <mc_stall_ctrl.h>
#include <mc_scv_trans.h>
#include "mc_dut_wrapper.h"


namespace CCS_RTL {
   class sysc_sim_wrapper : public sc_module
   {
   public:
      // Module instance pointers
      HDL::ccs_DUT_wrapper ccs_rtl;
      
      // Interface Ports
      sc_core::sc_in<bool > clk;
      sc_core::sc_in<bool > rst;
      sc_core::sc_in<bool > data_valid_source;
      sc_core::sc_in<bool > data_req_sink;
      sc_core::sc_in<ac_fixed<23, 18, true, AC_RND_INF, AC_SAT > > in_real;
      sc_core::sc_in<ac_fixed<23, 18, true, AC_RND_INF, AC_SAT > > in_img;
      sc_core::sc_out<ac_fixed<23, 18, true, AC_RND_INF, AC_SAT > > out_real;
      sc_core::sc_out<ac_fixed<23, 18, true, AC_RND_INF, AC_SAT > > out_img;
      sc_core::sc_out<bool > data_valid_sink;
      sc_core::sc_out<bool > data_req_source;
      
      // Named Objects
      
      // Data objects
      sc_signal< bool >                          ccs_rtl_SIG_clk;
      sc_signal< sc_logic >                      ccs_rtl_SIG_rst;
      sc_signal< sc_logic >                      ccs_rtl_SIG_data_valid_source;
      sc_signal< sc_logic >                      ccs_rtl_SIG_data_req_sink;
      sc_signal< sc_lv<23> >                     ccs_rtl_SIG_in_real;
      sc_signal< sc_lv<23> >                     ccs_rtl_SIG_in_img;
      sc_signal< sc_lv<23> >                     ccs_rtl_SIG_out_real;
      sc_signal< sc_lv<23> >                     ccs_rtl_SIG_out_img;
      sc_signal< sc_logic >                      ccs_rtl_SIG_data_valid_sink;
      sc_signal< sc_logic >                      ccs_rtl_SIG_data_req_source;
      
      // Declare processes (SC_METHOD and SC_THREAD)
      void update_proc();
      
      // Constructor
      SC_HAS_PROCESS(sysc_sim_wrapper);
      sysc_sim_wrapper(
         const sc_module_name& nm
      )
         : ccs_rtl(
            "ccs_rtl",
            TO_QUOTED_STRING(TOP_HDL_ENTITY)
         )
         , clk("clk")
         , rst("rst")
         , data_valid_source("data_valid_source")
         , data_req_sink("data_req_sink")
         , in_real("in_real")
         , in_img("in_img")
         , out_real("out_real")
         , out_img("out_img")
         , data_valid_sink("data_valid_sink")
         , data_req_source("data_req_source")
         , ccs_rtl_SIG_clk("ccs_rtl_SIG_clk")
         , ccs_rtl_SIG_rst("ccs_rtl_SIG_rst")
         , ccs_rtl_SIG_data_valid_source("ccs_rtl_SIG_data_valid_source")
         , ccs_rtl_SIG_data_req_sink("ccs_rtl_SIG_data_req_sink")
         , ccs_rtl_SIG_in_real("ccs_rtl_SIG_in_real")
         , ccs_rtl_SIG_in_img("ccs_rtl_SIG_in_img")
         , ccs_rtl_SIG_out_real("ccs_rtl_SIG_out_real")
         , ccs_rtl_SIG_out_img("ccs_rtl_SIG_out_img")
         , ccs_rtl_SIG_data_valid_sink("ccs_rtl_SIG_data_valid_sink")
         , ccs_rtl_SIG_data_req_source("ccs_rtl_SIG_data_req_source")
      {
         // Instantiate other modules
         ccs_rtl.clk(ccs_rtl_SIG_clk);
         ccs_rtl.rst(ccs_rtl_SIG_rst);
         ccs_rtl.data_valid_source(ccs_rtl_SIG_data_valid_source);
         ccs_rtl.data_req_sink(ccs_rtl_SIG_data_req_sink);
         ccs_rtl.in_real(ccs_rtl_SIG_in_real);
         ccs_rtl.in_img(ccs_rtl_SIG_in_img);
         ccs_rtl.out_real(ccs_rtl_SIG_out_real);
         ccs_rtl.out_img(ccs_rtl_SIG_out_img);
         ccs_rtl.data_valid_sink(ccs_rtl_SIG_data_valid_sink);
         ccs_rtl.data_req_source(ccs_rtl_SIG_data_req_source);
         
         
         // Register processes
         SC_METHOD(update_proc);
         sensitive  << clk << rst << data_valid_source << data_req_sink << in_real << in_img << ccs_rtl_SIG_out_real << ccs_rtl_SIG_out_img << ccs_rtl_SIG_data_valid_sink << ccs_rtl_SIG_data_req_source;
         // Other constructor statements
      }
      
      ~sysc_sim_wrapper()
      {
      }
      
      // C++ class functions
   };
} // end namespace CCS_RTL
#endif //INCLUDED_SYSC_SIM_WRAPPER_H
