// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2022.2_1/1019737 Production Release
//  HLS Date:       Mon Nov 21 20:05:27 PST 2022
// 
//  Generated by:   HLS_student@wifi-salsa-197.priv.enst-bretagne.fr
//  Generated date: Tue Mar 14 16:24:04 2023
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    FFT_FFT_COMPORTEMENT_COMPORTEMENT_fsm
//  FSM Module
// ------------------------------------------------------------------


module FFT_FFT_COMPORTEMENT_COMPORTEMENT_fsm (
  clk, rst, fsm_output
);
  input clk;
  input rst;
  output [7:0] fsm_output;
  reg [7:0] fsm_output;


  // FSM State Type Declaration for FFT_FFT_COMPORTEMENT_COMPORTEMENT_fsm_1
  parameter
    while_C_0 = 3'd0,
    while_C_1 = 3'd1,
    while_C_2 = 3'd2,
    while_C_3 = 3'd3,
    while_C_4 = 3'd4,
    while_C_5 = 3'd5,
    while_C_6 = 3'd6,
    while_C_7 = 3'd7;

  reg [2:0] state_var;
  reg [2:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : FFT_FFT_COMPORTEMENT_COMPORTEMENT_fsm_1
    case (state_var)
      while_C_1 : begin
        fsm_output = 8'b00000010;
        state_var_NS = while_C_2;
      end
      while_C_2 : begin
        fsm_output = 8'b00000100;
        state_var_NS = while_C_3;
      end
      while_C_3 : begin
        fsm_output = 8'b00001000;
        state_var_NS = while_C_4;
      end
      while_C_4 : begin
        fsm_output = 8'b00010000;
        state_var_NS = while_C_5;
      end
      while_C_5 : begin
        fsm_output = 8'b00100000;
        state_var_NS = while_C_6;
      end
      while_C_6 : begin
        fsm_output = 8'b01000000;
        state_var_NS = while_C_7;
      end
      while_C_7 : begin
        fsm_output = 8'b10000000;
        state_var_NS = while_C_0;
      end
      // while_C_0
      default : begin
        fsm_output = 8'b00000001;
        state_var_NS = while_C_1;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= while_C_0;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    FFT_FFT_COMPORTEMENT
// ------------------------------------------------------------------


module FFT_FFT_COMPORTEMENT (
  clk, rst, data_valid_source, data_req_sink, in_real, in_img, out_real, out_img,
      data_valid_sink, data_req_source
);
  input clk;
  input rst;
  input data_valid_source;
  input data_req_sink;
  input [22:0] in_real;
  input [22:0] in_img;
  output [22:0] out_real;
  output [22:0] out_img;
  output data_valid_sink;
  reg data_valid_sink;
  output data_req_source;
  reg data_req_source;


  // Interconnect Declarations
  reg while_if_if_2_mux_3;
  reg [20:0] while_if_if_2_mux_4;
  reg while_if_if_2_mux_5;
  reg while_if_if_2_mux_9;
  reg [20:0] while_if_if_2_mux_10;
  reg while_if_if_2_mux_11;
  wire [7:0] fsm_output;
  wire while_if_aelse_2_nor_tmp;
  wire while_if_if_3_nor_1_tmp;
  wire while_if_if_nor_tmp;
  wire [23:0] but_8_acc_14_tmp;
  wire [24:0] nl_but_8_acc_14_tmp;
  wire [23:0] but_8_acc_13_tmp;
  wire [24:0] nl_but_8_acc_13_tmp;
  wire [23:0] but_8_acc_12_tmp;
  wire [24:0] nl_but_8_acc_12_tmp;
  wire [23:0] but_8_acc_tmp;
  wire [24:0] nl_but_8_acc_tmp;
  wire mux_tmp;
  wire and_dcpl_9;
  wire or_dcpl_31;
  wire or_dcpl_42;
  wire or_dcpl_44;
  wire or_dcpl_47;
  wire or_dcpl_50;
  wire or_dcpl_54;
  wire or_dcpl_57;
  wire or_tmp_90;
  wire or_tmp_101;
  wire or_tmp_109;
  wire or_tmp_120;
  wire or_tmp_123;
  wire or_tmp_126;
  wire or_tmp_154;
  wire or_tmp_170;
  wire or_tmp_182;
  reg [27:0] i_sva_31_4;
  reg [2:0] i_sva_2_0;
  reg j_sva_3;
  wire while_if_land_2_lpi_1_dfm_1;
  reg processing_sva;
  wire [24:0] but_11_acc_17_psp_1;
  wire [25:0] nl_but_11_acc_17_psp_1;
  reg [28:0] but_11_acc_13_itm;
  wire [29:0] nl_but_11_acc_13_itm;
  reg [28:0] but_11_acc_12_itm;
  wire [29:0] nl_but_11_acc_12_itm;
  reg [23:0] but_10_mul_2_psp_sva;
  wire [24:0] nl_but_10_mul_2_psp_sva;
  reg [23:0] but_10_mul_1_psp_sva;
  wire [24:0] nl_but_10_mul_1_psp_sva;
  wire [23:0] but_7_mul_2_psp_sva_1;
  wire [24:0] nl_but_7_mul_2_psp_sva_1;
  wire [20:0] but_2_conc_78_21_1;
  wire but_2_conc_78_0;
  wire [20:0] but_2_conc_80_21_1;
  wire but_2_conc_80_0;
  wire [23:0] but_7_mul_1_psp_sva_1;
  wire [24:0] nl_but_7_mul_1_psp_sva_1;
  wire [20:0] but_2_conc_82_21_1;
  wire but_2_conc_82_0;
  wire [20:0] but_3_conc_9_ncse_21_1_sva_1;
  wire but_3_conc_9_ncse_0_sva_1;
  wire [20:0] but_2_conc_84_21_1;
  wire but_2_conc_84_0;
  wire [20:0] but_3_conc_8_ncse_21_1_sva_1;
  wire but_3_conc_8_ncse_0_sva_1;
  wire [23:0] but_5_mul_2_psp_sva_1;
  wire [24:0] nl_but_5_mul_2_psp_sva_1;
  wire [20:0] but_conc_72_21_1;
  wire but_conc_72_0;
  wire [20:0] but_conc_74_21_1;
  wire but_conc_74_0;
  wire [23:0] but_5_mul_1_psp_sva_1;
  wire [24:0] nl_but_5_mul_1_psp_sva_1;
  wire [20:0] fft_stage1_imag_conc_3_21_1;
  wire fft_stage1_imag_conc_3_0;
  wire [20:0] but_1_conc_9_ncse_21_1_sva_1;
  wire but_1_conc_9_ncse_0_sva_1;
  wire [20:0] fft_stage1_real_conc_3_21_1;
  wire fft_stage1_real_conc_3_0;
  wire [20:0] but_1_conc_8_ncse_21_1_sva_1;
  wire but_1_conc_8_ncse_0_sva_1;
  reg [22:0] cx_in_imag_3_sva;
  reg [22:0] cx_in_imag_7_sva;
  reg [22:0] cx_in_real_3_sva;
  reg [22:0] cx_in_real_7_sva;
  reg [22:0] cx_in_imag_1_sva;
  reg [22:0] cx_in_imag_5_sva;
  reg [22:0] cx_in_real_1_sva;
  reg [22:0] cx_in_real_5_sva;
  reg [22:0] cx_in_imag_2_sva;
  reg [22:0] cx_in_imag_6_sva;
  reg [22:0] cx_in_real_2_sva;
  reg [22:0] cx_in_real_6_sva;
  reg [22:0] cx_in_imag_0_sva;
  reg [22:0] cx_in_imag_4_sva;
  reg [22:0] cx_in_real_0_sva;
  reg [22:0] cx_in_real_4_sva;
  reg while_if_if_nor_cse_sva;
  reg while_if_aelse_nor_itm;
  reg i_sva_3;
  reg while_if_while_if_if_and_itm;
  wire [24:0] but_11_acc_8_psp_1_sva_1;
  wire [25:0] nl_but_11_acc_8_psp_1_sva_1;
  wire [24:0] but_11_acc_2_psp_1_sva_1;
  wire [25:0] nl_but_11_acc_2_psp_1_sva_1;
  wire [23:0] but_10_acc_14_psp_sva_1;
  wire [24:0] nl_but_10_acc_14_psp_sva_1;
  wire [23:0] but_10_acc_13_psp_sva_1;
  wire [24:0] nl_but_10_acc_13_psp_sva_1;
  wire [23:0] but_10_acc_12_psp_sva_1;
  wire [24:0] nl_but_10_acc_12_psp_sva_1;
  wire [23:0] but_10_acc_psp_sva_1;
  wire [24:0] nl_but_10_acc_psp_sva_1;
  wire [23:0] but_7_acc_14_psp_sva_1;
  wire [24:0] nl_but_7_acc_14_psp_sva_1;
  wire [23:0] but_7_acc_13_psp_sva_1;
  wire [24:0] nl_but_7_acc_13_psp_sva_1;
  wire [23:0] but_7_acc_12_psp_sva_1;
  wire [24:0] nl_but_7_acc_12_psp_sva_1;
  wire [23:0] but_7_acc_psp_sva_1;
  wire [24:0] nl_but_7_acc_psp_sva_1;
  wire [23:0] but_6_acc_14_psp_sva_1;
  wire [24:0] nl_but_6_acc_14_psp_sva_1;
  wire [23:0] but_3_acc_12_psp_sva_1;
  wire [24:0] nl_but_3_acc_12_psp_sva_1;
  wire [23:0] but_6_acc_13_psp_sva_1;
  wire [24:0] nl_but_6_acc_13_psp_sva_1;
  wire [23:0] but_3_acc_psp_sva_1;
  wire [24:0] nl_but_3_acc_psp_sva_1;
  wire [23:0] but_6_acc_12_psp_sva_1;
  wire [24:0] nl_but_6_acc_12_psp_sva_1;
  wire [23:0] but_6_acc_psp_sva_1;
  wire [24:0] nl_but_6_acc_psp_sva_1;
  wire [23:0] but_5_acc_14_psp_sva_1;
  wire [24:0] nl_but_5_acc_14_psp_sva_1;
  wire [23:0] but_5_acc_13_psp_sva_1;
  wire [24:0] nl_but_5_acc_13_psp_sva_1;
  wire [23:0] but_5_acc_12_psp_sva_1;
  wire [24:0] nl_but_5_acc_12_psp_sva_1;
  wire [23:0] but_5_acc_psp_sva_1;
  wire [24:0] nl_but_5_acc_psp_sva_1;
  wire [23:0] but_4_acc_14_psp_sva_1;
  wire [24:0] nl_but_4_acc_14_psp_sva_1;
  wire [23:0] but_1_acc_12_psp_sva_1;
  wire [24:0] nl_but_1_acc_12_psp_sva_1;
  wire [23:0] but_4_acc_13_psp_sva_1;
  wire [24:0] nl_but_4_acc_13_psp_sva_1;
  wire [23:0] but_1_acc_psp_sva_1;
  wire [24:0] nl_but_1_acc_psp_sva_1;
  wire [23:0] but_4_acc_12_psp_sva_1;
  wire [24:0] nl_but_4_acc_12_psp_sva_1;
  wire [23:0] but_4_acc_psp_sva_1;
  wire [24:0] nl_but_4_acc_psp_sva_1;
  wire [23:0] but_3_acc_14_psp_sva_1;
  wire [24:0] nl_but_3_acc_14_psp_sva_1;
  wire [23:0] but_3_acc_13_psp_sva_1;
  wire [24:0] nl_but_3_acc_13_psp_sva_1;
  wire [23:0] but_2_acc_12_psp_sva_1;
  wire [24:0] nl_but_2_acc_12_psp_sva_1;
  wire [23:0] but_2_acc_psp_sva_1;
  wire [24:0] nl_but_2_acc_psp_sva_1;
  wire [23:0] but_1_acc_14_psp_sva_1;
  wire [24:0] nl_but_1_acc_14_psp_sva_1;
  wire [23:0] but_1_acc_13_psp_sva_1;
  wire [24:0] nl_but_1_acc_13_psp_sva_1;
  wire [23:0] but_acc_14_psp_sva_1;
  wire [24:0] nl_but_acc_14_psp_sva_1;
  wire [23:0] but_acc_13_psp_sva_1;
  wire [24:0] nl_but_acc_13_psp_sva_1;
  wire [23:0] but_acc_12_psp_sva_1;
  wire [24:0] nl_but_acc_12_psp_sva_1;
  wire [23:0] but_acc_psp_sva_1;
  wire [24:0] nl_but_acc_psp_sva_1;
  wire [27:0] j_sva_dfm_mx0_31_4;
  wire j_sva_dfm_mx0_3;
  wire [2:0] j_sva_dfm_mx0_2_0;
  wire or_101_ssc;
  wire [27:0] i_sva_dfm_mx0_31_4;
  wire i_sva_dfm_mx0_3;
  wire [2:0] i_sva_dfm_mx0_2_0;
  wire and_380_cse;
  wire and_cse;
  reg but_4_acc_14_psp_sva_23;
  reg [20:0] but_4_conc_11_ncse_21_1_sva;
  reg but_4_conc_11_ncse_0_sva;
  reg but_4_acc_13_psp_sva_23;
  reg [20:0] but_4_conc_10_ncse_21_1_sva;
  reg but_4_conc_10_ncse_0_sva;
  wire [31:0] z_out;
  wire [31:0] z_out_1;
  wire [24:0] z_out_2;
  wire [25:0] nl_z_out_2;
  wire [24:0] z_out_3;
  wire [25:0] nl_z_out_3;
  wire [27:0] z_out_4;
  wire signed [28:0] nl_z_out_4;
  wire [29:0] z_out_8;
  wire [24:0] z_out_9;
  wire [25:0] nl_z_out_9;
  wire [24:0] z_out_10;
  wire [25:0] nl_z_out_10;
  reg [20:0] cx_out_real_3_21_1_sva;
  reg cx_out_real_3_0_sva;
  reg [20:0] cx_out_real_4_21_1_sva;
  reg cx_out_real_4_0_sva;
  reg [20:0] cx_out_real_2_21_1_sva;
  reg cx_out_real_2_0_sva;
  reg [20:0] cx_out_real_5_21_1_sva;
  reg cx_out_real_5_0_sva;
  reg [20:0] cx_out_real_1_21_1_sva;
  reg cx_out_real_1_0_sva;
  reg [20:0] cx_out_real_6_21_1_sva;
  reg cx_out_real_6_0_sva;
  reg [20:0] cx_out_real_0_21_1_sva;
  reg cx_out_real_0_0_sva;
  reg [20:0] cx_out_real_7_21_1_sva;
  reg cx_out_real_7_0_sva;
  reg [20:0] cx_out_imag_3_21_1_sva;
  reg cx_out_imag_3_0_sva;
  reg [20:0] cx_out_imag_4_21_1_sva;
  reg cx_out_imag_4_0_sva;
  reg [20:0] cx_out_imag_2_21_1_sva;
  reg cx_out_imag_2_0_sva;
  reg [20:0] cx_out_imag_6_21_1_sva;
  reg cx_out_imag_6_0_sva;
  reg cx_out_imag_0_0_sva;
  reg [20:0] cx_out_imag_7_21_1_sva;
  reg cx_out_imag_7_0_sva;
  reg [20:0] but_5_conc_8_ncse_21_1_sva;
  reg but_5_conc_8_ncse_0_sva;
  reg [20:0] but_5_conc_9_ncse_21_1_sva;
  reg but_5_conc_9_ncse_0_sva;
  reg [20:0] but_5_conc_10_ncse_21_1_sva;
  reg but_5_conc_10_ncse_0_sva;
  reg [20:0] but_5_conc_11_ncse_21_1_sva;
  reg but_5_conc_11_ncse_0_sva;
  reg [20:0] but_7_conc_8_ncse_21_1_sva;
  reg but_7_conc_8_ncse_0_sva;
  reg [20:0] but_7_conc_9_ncse_21_1_sva;
  reg but_7_conc_9_ncse_0_sva;
  reg but_8_nor_ovfl_sva;
  reg but_8_and_unfl_sva;
  reg but_8_nor_ovfl_1_sva;
  reg but_8_and_unfl_1_sva;
  reg but_8_nor_ovfl_2_sva;
  reg but_8_and_unfl_2_sva;
  reg but_8_nor_ovfl_3_sva;
  reg but_8_and_unfl_3_sva;
  reg [27:0] but_9_mul_3_psp_sva;
  reg [20:0] cx_out_real_0_21_1_sva_dfm;
  reg cx_out_real_0_0_sva_dfm;
  reg [20:0] cx_out_real_1_21_1_sva_dfm;
  reg cx_out_real_1_0_sva_dfm;
  reg [20:0] cx_out_real_2_21_1_sva_dfm;
  reg cx_out_real_2_0_sva_dfm;
  reg [20:0] cx_out_real_3_21_1_sva_dfm;
  reg cx_out_real_3_0_sva_dfm;
  reg [20:0] cx_out_real_4_21_1_sva_dfm;
  reg cx_out_real_4_0_sva_dfm;
  reg [20:0] cx_out_real_5_21_1_sva_dfm;
  reg cx_out_real_5_0_sva_dfm;
  reg [20:0] cx_out_real_6_21_1_sva_dfm;
  reg cx_out_real_6_0_sva_dfm;
  reg [20:0] cx_out_real_7_21_1_sva_dfm;
  reg cx_out_real_7_0_sva_dfm;
  reg [20:0] cx_out_imag_0_21_1_sva_dfm;
  reg cx_out_imag_0_0_sva_dfm;
  reg [20:0] cx_out_imag_1_21_1_sva_dfm;
  reg cx_out_imag_1_0_sva_dfm;
  reg [20:0] cx_out_imag_2_21_1_sva_dfm;
  reg cx_out_imag_2_0_sva_dfm;
  reg [20:0] cx_out_imag_3_21_1_sva_dfm;
  reg cx_out_imag_3_0_sva_dfm;
  reg [20:0] cx_out_imag_4_21_1_sva_dfm;
  reg cx_out_imag_4_0_sva_dfm;
  reg [20:0] cx_out_imag_5_21_1_sva_dfm;
  reg cx_out_imag_5_0_sva_dfm;
  reg [20:0] cx_out_imag_6_21_1_sva_dfm;
  reg cx_out_imag_6_0_sva_dfm;
  reg [20:0] cx_out_imag_7_21_1_sva_dfm;
  reg cx_out_imag_7_0_sva_dfm;
  reg [20:0] but_7_but_7_nor_7_itm;
  reg but_7_but_7_nor_8_itm;
  reg [20:0] but_7_but_7_nor_10_itm;
  reg but_7_but_7_nor_11_itm;
  reg but_8_acc_psp_lpi_1_23;
  reg but_8_acc_12_psp_lpi_1_23;
  reg but_8_acc_13_psp_lpi_1_23;
  reg but_8_acc_14_psp_lpi_1_23;
  reg but_9_acc_2_psp_1_lpi_1_24;
  reg but_9_acc_8_psp_1_lpi_1_24;
  reg but_10_acc_psp_lpi_1_23;
  reg but_10_acc_12_psp_lpi_1_23;
  reg but_10_acc_13_psp_lpi_1_23;
  reg but_10_acc_14_psp_lpi_1_23;
  reg but_11_acc_2_psp_1_lpi_1_24;
  reg but_11_acc_5_psp_1_lpi_1_24;
  reg but_11_acc_8_psp_1_lpi_1_24;
  reg but_11_acc_11_psp_1_lpi_1_24;
  reg but_8_acc_psp_lpi_1_dfm_23;
  reg but_8_acc_12_psp_lpi_1_dfm_23;
  reg but_8_acc_13_psp_lpi_1_dfm_23;
  reg but_8_acc_14_psp_lpi_1_dfm_23;
  reg but_9_acc_2_psp_1_lpi_1_dfm_24;
  reg but_9_acc_5_psp_1_lpi_1_dfm_24;
  reg but_9_acc_8_psp_1_lpi_1_dfm_24;
  reg but_9_acc_11_psp_1_lpi_1_dfm_24;
  reg but_10_acc_psp_lpi_1_dfm_23;
  reg but_10_acc_12_psp_lpi_1_dfm_23;
  reg but_10_acc_13_psp_lpi_1_dfm_23;
  reg but_10_acc_14_psp_lpi_1_dfm_23;
  reg but_11_acc_2_psp_1_lpi_1_dfm_24;
  reg but_11_acc_5_psp_1_lpi_1_dfm_24;
  reg but_11_acc_8_psp_1_lpi_1_dfm_24;
  reg but_11_acc_11_psp_1_lpi_1_dfm_24;
  reg [27:0] j_sva_31_4;
  reg [2:0] j_sva_2_0;
  wire data_valid_sink_mx0c1;
  wire data_req_source_mx0c0;
  wire but_8_nor_ovfl_3_sva_1;
  wire but_8_and_unfl_3_sva_1;
  wire but_8_nor_ovfl_1_sva_1;
  wire but_8_and_unfl_1_sva_1;
  wire but_8_nor_ovfl_2_sva_1;
  wire but_8_and_unfl_2_sva_1;
  wire but_8_nor_ovfl_sva_1;
  wire but_8_and_unfl_sva_1;
  wire but_7_nor_ovfl_3_sva_1;
  wire but_7_and_unfl_3_sva_1;
  wire but_7_nor_ovfl_2_sva_1;
  wire but_7_and_unfl_2_sva_1;
  wire but_6_nor_ovfl_2_sva_1;
  wire but_6_and_unfl_2_sva_1;
  wire but_6_nor_ovfl_3_sva_1;
  wire but_6_and_unfl_3_sva_1;
  wire [20:0] but_6_conc_9_ncse_21_1_sva_1;
  wire but_6_conc_9_ncse_0_sva_1;
  wire [20:0] but_6_conc_8_ncse_21_1_sva_1;
  wire but_6_conc_8_ncse_0_sva_1;
  wire but_7_nor_ovfl_1_sva_1;
  wire but_7_and_unfl_1_sva_1;
  wire but_3_nor_ovfl_2_sva_1;
  wire but_3_and_unfl_2_sva_1;
  wire but_7_nor_ovfl_sva_1;
  wire but_7_and_unfl_sva_1;
  wire but_3_nor_ovfl_3_sva_1;
  wire but_3_and_unfl_3_sva_1;
  wire but_6_nor_ovfl_1_sva_1;
  wire but_6_and_unfl_1_sva_1;
  wire but_6_nor_ovfl_sva_1;
  wire but_6_and_unfl_sva_1;
  wire but_5_nor_ovfl_3_sva_1;
  wire but_5_and_unfl_3_sva_1;
  wire but_5_nor_ovfl_2_sva_1;
  wire but_5_and_unfl_2_sva_1;
  wire but_5_nor_ovfl_1_sva_1;
  wire but_5_and_unfl_1_sva_1;
  wire but_1_nor_ovfl_2_sva_1;
  wire but_1_and_unfl_2_sva_1;
  wire but_5_nor_ovfl_sva_1;
  wire but_5_and_unfl_sva_1;
  wire but_1_nor_ovfl_3_sva_1;
  wire but_1_and_unfl_3_sva_1;
  wire but_4_nor_ovfl_3_sva_1;
  wire but_4_and_unfl_3_sva_1;
  wire but_4_nor_ovfl_2_sva_1;
  wire but_4_and_unfl_2_sva_1;
  wire but_4_nor_ovfl_1_sva_1;
  wire but_4_and_unfl_1_sva_1;
  wire but_4_nor_ovfl_sva_1;
  wire but_4_and_unfl_sva_1;
  wire but_3_nor_ovfl_1_sva_1;
  wire but_3_and_unfl_1_sva_1;
  wire but_3_nor_ovfl_sva_1;
  wire but_3_and_unfl_sva_1;
  wire but_2_nor_ovfl_3_sva_1;
  wire but_2_and_unfl_3_sva_1;
  wire but_2_nor_ovfl_2_sva_1;
  wire but_2_and_unfl_2_sva_1;
  wire but_2_nor_ovfl_1_sva_1;
  wire but_2_and_unfl_1_sva_1;
  wire but_2_nor_ovfl_sva_1;
  wire but_2_and_unfl_sva_1;
  wire but_1_nor_ovfl_1_sva_1;
  wire but_1_and_unfl_1_sva_1;
  wire but_1_nor_ovfl_sva_1;
  wire but_1_and_unfl_sva_1;
  wire but_nor_ovfl_3_sva_1;
  wire but_and_unfl_3_sva_1;
  wire but_nor_ovfl_2_sva_1;
  wire but_and_unfl_2_sva_1;
  wire but_nor_ovfl_1_sva_1;
  wire but_and_unfl_1_sva_1;
  wire but_nor_ovfl_sva_1;
  wire but_and_unfl_sva_1;
  wire but_10_nor_ovfl_3_sva_1;
  wire but_10_and_unfl_3_sva_1;
  wire but_10_nor_ovfl_1_sva_1;
  wire but_10_and_unfl_1_sva_1;
  wire but_10_nor_ovfl_2_sva_1;
  wire but_10_and_unfl_2_sva_1;
  wire but_10_nor_ovfl_sva_1;
  wire but_10_and_unfl_sva_1;
  wire but_11_nor_ovfl_3_sva_1;
  wire but_11_and_unfl_3_sva_1;
  wire but_11_nor_ovfl_1_sva_1;
  wire but_11_and_unfl_1_sva_1;
  wire but_11_nor_ovfl_2_sva_1;
  wire but_11_and_unfl_2_sva_1;
  wire but_11_nor_ovfl_sva_1;
  wire but_11_and_unfl_sva_1;
  reg but_5_acc_psp_sva_23;
  reg but_5_acc_12_psp_sva_23;
  reg but_5_acc_13_psp_sva_23;
  reg but_5_acc_14_psp_sva_23;
  reg but_7_acc_psp_sva_23;
  reg but_7_acc_12_psp_sva_23;
  reg but_7_acc_13_psp_sva_23;
  reg but_7_acc_14_psp_sva_23;
  reg [20:0] but_8_acc_psp_sva_21_1;
  reg [20:0] but_8_acc_12_psp_sva_21_1;
  reg [20:0] but_8_acc_13_psp_sva_21_1;
  reg [20:0] but_8_acc_14_psp_sva_21_1;
  wire [20:0] fft_stage2_imag_conc_3_21_1;
  wire fft_stage2_imag_conc_3_0;
  wire [20:0] fft_stage2_real_conc_3_21_1;
  wire fft_stage2_real_conc_3_0;
  reg [6:0] reg_but_11_mul_1_psp_ftd;
  reg [20:0] reg_but_11_mul_1_psp_ftd_1;
  reg [28:0] reg_but_11_acc_15_cse;
  reg [28:0] reg_but_9_acc_14_cse;
  reg [28:0] reg_but_11_acc_14_cse;
  wire reg_but_9_but_9_and_cse;
  wire cx_in_imag_and_cse;
  wire cx_in_imag_and_1_cse;
  wire cx_in_imag_and_2_cse;
  wire cx_in_imag_and_3_cse;
  wire cx_in_imag_and_4_cse;
  wire cx_in_imag_and_5_cse;
  wire cx_in_imag_and_6_cse;
  wire cx_in_imag_and_7_cse;
  wire but_9_but_9_nor_11_cse;
  wire [20:0] but_9_but_9_nor_10_cse;
  wire but_9_but_9_nor_5_cse;
  wire [20:0] but_9_but_9_nor_4_cse;
  wire but_11_or_19_cse;
  wire but_11_or_20_cse;
  wire but_11_and_18_rgt;

  wire[20:0] but_9_nor_12_nl;
  wire[20:0] but_9_nor_18_nl;
  wire[20:0] but_7_nor_18_nl;
  wire[20:0] but_7_nor_15_nl;
  wire[20:0] but_10_but_6_or_2_nl;
  wire[20:0] but_6_nor_15_nl;
  wire but_10_but_6_or_3_nl;
  wire[20:0] but_10_but_6_or_nl;
  wire[20:0] but_6_nor_18_nl;
  wire but_10_but_6_or_1_nl;
  wire[20:0] but_7_nor_12_nl;
  wire[20:0] but_7_nor_9_nl;
  wire[20:0] but_5_nor_18_nl;
  wire[20:0] but_5_nor_15_nl;
  wire[20:0] but_5_nor_12_nl;
  wire[20:0] but_5_nor_9_nl;
  wire[20:0] but_4_nor_18_nl;
  wire[20:0] but_4_nor_15_nl;
  wire[20:0] but_10_nor_18_nl;
  wire[20:0] but_8_nor_18_nl;
  wire[20:0] but_10_nor_12_nl;
  wire[20:0] but_8_nor_12_nl;
  wire[20:0] but_10_nor_15_nl;
  wire[20:0] but_8_nor_15_nl;
  wire[20:0] but_10_nor_9_nl;
  wire[20:0] but_8_nor_9_nl;
  wire[20:0] but_11_nor_15_nl;
  wire[20:0] but_11_nor_9_nl;
  wire[29:0] acc_4_nl;
  wire[30:0] nl_acc_4_nl;
  wire[6:0] but_11_mux_30_nl;
  wire[20:0] but_11_mux_31_nl;
  wire[6:0] but_11_mux_32_nl;
  wire[20:0] but_11_mux_33_nl;
  wire[29:0] acc_5_nl;
  wire[30:0] nl_acc_5_nl;
  wire[27:0] but_11_mux_34_nl;
  wire but_11_or_27_nl;
  wire[6:0] but_11_mux_35_nl;
  wire[20:0] but_11_mux_36_nl;
  wire[29:0] acc_6_nl;
  wire[30:0] nl_acc_6_nl;
  wire[6:0] but_9_mux_22_nl;
  wire[20:0] but_9_mux_23_nl;
  wire[27:0] but_9_mux_24_nl;
  wire[20:0] but_6_nor_12_nl;
  wire[20:0] but_6_nor_9_nl;
  wire[20:0] but_7_but_3_or_2_nl;
  wire[20:0] but_3_nor_15_nl;
  wire but_7_but_3_or_3_nl;
  wire[20:0] but_7_but_3_or_nl;
  wire[20:0] but_3_nor_18_nl;
  wire but_7_but_3_or_1_nl;
  wire[20:0] but_3_nor_12_nl;
  wire[20:0] but_3_nor_9_nl;
  wire[20:0] but_5_but_1_or_2_nl;
  wire[20:0] but_1_nor_15_nl;
  wire but_5_but_1_or_3_nl;
  wire[20:0] but_5_but_1_or_nl;
  wire[20:0] but_1_nor_18_nl;
  wire but_5_but_1_or_1_nl;
  wire[20:0] but_1_nor_12_nl;
  wire[20:0] but_1_nor_9_nl;
  wire[20:0] but_4_nor_12_nl;
  wire[20:0] but_4_nor_9_nl;
  wire[20:0] but_2_nor_18_nl;
  wire[20:0] but_2_nor_15_nl;
  wire[20:0] but_2_nor_12_nl;
  wire[20:0] but_2_nor_9_nl;
  wire[20:0] but_nor_18_nl;
  wire[20:0] but_nor_15_nl;
  wire[20:0] but_nor_12_nl;
  wire[20:0] but_nor_9_nl;
  wire but_11_and_10_nl;
  wire but_11_and_nl;
  wire or_23_nl;
  wire mux_20_nl;
  wire and_69_nl;
  wire mux_19_nl;
  wire and_68_nl;
  wire[32:0] acc_nl;
  wire[33:0] nl_acc_nl;
  wire[27:0] but_2_mux1h_6_nl;
  wire but_2_mux1h_7_nl;
  wire[2:0] but_2_mux1h_8_nl;
  wire but_2_or_2_nl;
  wire but_2_but_2_and_2_nl;
  wire but_2_mux_7_nl;
  wire[20:0] but_2_but_2_and_3_nl;
  wire[20:0] but_2_mux_8_nl;
  wire not_134_nl;
  wire but_2_but_2_or_1_nl;
  wire but_2_mux_9_nl;
  wire[32:0] acc_1_nl;
  wire[33:0] nl_acc_1_nl;
  wire[27:0] but_2_mux_10_nl;
  wire but_2_mux_11_nl;
  wire[2:0] but_2_mux_12_nl;
  wire but_2_or_3_nl;
  wire[22:0] but_2_mux_13_nl;
  wire[23:0] but_11_mux_26_nl;
  wire but_11_mux_27_nl;
  wire[20:0] but_11_mux_28_nl;
  wire but_11_mux_29_nl;
  wire[23:0] but_9_mux_18_nl;
  wire but_9_mux_19_nl;
  wire[20:0] but_9_mux_20_nl;
  wire but_9_mux_21_nl;
  wire[4:0] but_11_but_11_mux_4_nl;
  wire but_11_or_26_nl;
  wire but_11_mux1h_35_nl;
  wire[20:0] but_11_mux1h_36_nl;
  wire but_11_mux1h_37_nl;
  wire[30:0] acc_7_nl;
  wire[31:0] nl_acc_7_nl;
  wire[28:0] but_11_mux_37_nl;
  wire but_11_mux_38_nl;
  wire[20:0] but_11_mux_39_nl;
  wire but_11_mux_40_nl;
  wire[24:0] mux_23_nl;
  wire or_287_nl;
  wire but_11_but_11_mux_5_nl;
  wire but_11_and_19_nl;
  wire but_9_and_17_nl;
  wire[24:0] but_11_mux1h_38_nl;
  wire but_11_mux1h_39_nl;
  wire but_11_and_20_nl;
  wire but_9_and_18_nl;
  wire but_9_and_19_nl;

  // Interconnect Declarations for Component Instantiations 
  FFT_FFT_COMPORTEMENT_COMPORTEMENT_fsm FFT_COMPORTEMENT_COMPORTEMENT_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output)
    );
  assign out_real = {while_if_if_2_mux_3 , while_if_if_2_mux_4 , while_if_if_2_mux_5};
  assign out_img = {while_if_if_2_mux_9 , while_if_if_2_mux_10 , while_if_if_2_mux_11};
  assign reg_but_9_but_9_and_cse = processing_sva & (fsm_output[7]);
  assign but_9_nor_12_nl = ~(MUX_v_21_2_2((z_out_10[21:1]), 21'b111111111111111111111,
      but_11_nor_ovfl_1_sva_1));
  assign but_9_but_9_nor_4_cse = ~(MUX_v_21_2_2(but_9_nor_12_nl, 21'b111111111111111111111,
      but_11_and_unfl_1_sva_1));
  assign but_9_nor_18_nl = ~(MUX_v_21_2_2((z_out_9[21:1]), 21'b111111111111111111111,
      but_11_nor_ovfl_3_sva_1));
  assign but_9_but_9_nor_10_cse = ~(MUX_v_21_2_2(but_9_nor_18_nl, 21'b111111111111111111111,
      but_11_and_unfl_3_sva_1));
  assign but_9_but_9_nor_5_cse = ~((~((z_out_10[0]) | but_11_nor_ovfl_1_sva_1)) |
      but_11_and_unfl_1_sva_1);
  assign but_9_but_9_nor_11_cse = ~((~((z_out_9[0]) | but_11_nor_ovfl_3_sva_1)) |
      but_11_and_unfl_3_sva_1);
  assign cx_in_imag_and_cse = (~(or_dcpl_44 | or_dcpl_42)) & (fsm_output[7]);
  assign cx_in_imag_and_1_cse = (~(or_dcpl_47 | or_dcpl_42)) & (fsm_output[7]);
  assign cx_in_imag_and_2_cse = (~(or_dcpl_44 | or_dcpl_50)) & (fsm_output[7]);
  assign cx_in_imag_and_3_cse = (~(or_dcpl_47 | or_dcpl_50)) & (fsm_output[7]);
  assign cx_in_imag_and_4_cse = (~(or_dcpl_54 | or_dcpl_42)) & (fsm_output[7]);
  assign cx_in_imag_and_5_cse = (~(or_dcpl_57 | or_dcpl_42)) & (fsm_output[7]);
  assign cx_in_imag_and_6_cse = (~(or_dcpl_54 | or_dcpl_50)) & (fsm_output[7]);
  assign cx_in_imag_and_7_cse = (~(or_dcpl_57 | or_dcpl_50)) & (fsm_output[7]);
  assign but_11_and_18_rgt = processing_sva & ((fsm_output[1]) | (fsm_output[4]));
  assign while_if_if_nor_tmp = ~((j_sva_31_4!=28'b0000000000000000000000000000) |
      (j_sva_2_0!=3'b000));
  assign nl_but_8_acc_14_tmp = conv_s2u_23_24({(but_4_acc_12_psp_sva_1[23]) , fft_stage2_imag_conc_3_21_1
      , fft_stage2_imag_conc_3_0}) + conv_s2u_23_24({(~ (but_6_acc_12_psp_sva_1[23]))
      , (~ but_6_conc_9_ncse_21_1_sva_1) , (~ but_6_conc_9_ncse_0_sva_1)}) + 24'b000000000000000000000001;
  assign but_8_acc_14_tmp = nl_but_8_acc_14_tmp[23:0];
  assign but_8_nor_ovfl_3_sva_1 = ~((but_8_acc_14_tmp[23:22]!=2'b01));
  assign but_8_and_unfl_3_sva_1 = (but_8_acc_14_tmp[23:22]==2'b10);
  assign nl_but_8_acc_12_tmp = conv_s2u_23_24({(but_4_acc_12_psp_sva_1[23]) , fft_stage2_imag_conc_3_21_1
      , fft_stage2_imag_conc_3_0}) + conv_s2u_23_24({(but_6_acc_12_psp_sva_1[23])
      , but_6_conc_9_ncse_21_1_sva_1 , but_6_conc_9_ncse_0_sva_1});
  assign but_8_acc_12_tmp = nl_but_8_acc_12_tmp[23:0];
  assign but_8_nor_ovfl_1_sva_1 = ~((but_8_acc_12_tmp[23:22]!=2'b01));
  assign but_8_and_unfl_1_sva_1 = (but_8_acc_12_tmp[23:22]==2'b10);
  assign nl_but_8_acc_13_tmp = conv_s2u_23_24({(but_4_acc_psp_sva_1[23]) , fft_stage2_real_conc_3_21_1
      , fft_stage2_real_conc_3_0}) + conv_s2u_23_24({(~ (but_6_acc_psp_sva_1[23]))
      , (~ but_6_conc_8_ncse_21_1_sva_1) , (~ but_6_conc_8_ncse_0_sva_1)}) + 24'b000000000000000000000001;
  assign but_8_acc_13_tmp = nl_but_8_acc_13_tmp[23:0];
  assign but_8_nor_ovfl_2_sva_1 = ~((but_8_acc_13_tmp[23:22]!=2'b01));
  assign but_8_and_unfl_2_sva_1 = (but_8_acc_13_tmp[23:22]==2'b10);
  assign nl_but_8_acc_tmp = conv_s2u_23_24({(but_4_acc_psp_sva_1[23]) , fft_stage2_real_conc_3_21_1
      , fft_stage2_real_conc_3_0}) + conv_s2u_23_24({(but_6_acc_psp_sva_1[23]) ,
      but_6_conc_8_ncse_21_1_sva_1 , but_6_conc_8_ncse_0_sva_1});
  assign but_8_acc_tmp = nl_but_8_acc_tmp[23:0];
  assign but_8_nor_ovfl_sva_1 = ~((but_8_acc_tmp[23:22]!=2'b01));
  assign but_8_and_unfl_sva_1 = (but_8_acc_tmp[23:22]==2'b10);
  assign nl_but_7_acc_14_psp_sva_1 = conv_s2s_23_24({(z_out[23]) , but_2_conc_78_21_1
      , but_2_conc_78_0}) - but_7_mul_2_psp_sva_1;
  assign but_7_acc_14_psp_sva_1 = nl_but_7_acc_14_psp_sva_1[23:0];
  assign nl_but_7_acc_13_psp_sva_1 = conv_s2s_23_24({(z_out_1[23]) , but_2_conc_80_21_1
      , but_2_conc_80_0}) + but_7_mul_1_psp_sva_1;
  assign but_7_acc_13_psp_sva_1 = nl_but_7_acc_13_psp_sva_1[23:0];
  assign nl_but_7_acc_12_psp_sva_1 = conv_s2s_23_24({(z_out[23]) , but_2_conc_78_21_1
      , but_2_conc_78_0}) + but_7_mul_2_psp_sva_1;
  assign but_7_acc_12_psp_sva_1 = nl_but_7_acc_12_psp_sva_1[23:0];
  assign nl_but_7_acc_psp_sva_1 = conv_s2s_23_24({(z_out_1[23]) , but_2_conc_80_21_1
      , but_2_conc_80_0}) - but_7_mul_1_psp_sva_1;
  assign but_7_acc_psp_sva_1 = nl_but_7_acc_psp_sva_1[23:0];
  assign nl_but_5_acc_14_psp_sva_1 = conv_s2s_23_24({(but_acc_14_psp_sva_1[23]) ,
      but_conc_72_21_1 , but_conc_72_0}) - but_5_mul_2_psp_sva_1;
  assign but_5_acc_14_psp_sva_1 = nl_but_5_acc_14_psp_sva_1[23:0];
  assign nl_but_5_acc_13_psp_sva_1 = conv_s2s_23_24({(but_acc_13_psp_sva_1[23]) ,
      but_conc_74_21_1 , but_conc_74_0}) + but_5_mul_1_psp_sva_1;
  assign but_5_acc_13_psp_sva_1 = nl_but_5_acc_13_psp_sva_1[23:0];
  assign nl_but_5_acc_12_psp_sva_1 = conv_s2s_23_24({(but_acc_14_psp_sva_1[23]) ,
      but_conc_72_21_1 , but_conc_72_0}) + but_5_mul_2_psp_sva_1;
  assign but_5_acc_12_psp_sva_1 = nl_but_5_acc_12_psp_sva_1[23:0];
  assign nl_but_5_acc_psp_sva_1 = conv_s2s_23_24({(but_acc_13_psp_sva_1[23]) , but_conc_74_21_1
      , but_conc_74_0}) - but_5_mul_1_psp_sva_1;
  assign but_5_acc_psp_sva_1 = nl_but_5_acc_psp_sva_1[23:0];
  assign nl_but_4_acc_14_psp_sva_1 = conv_s2u_23_24({(but_acc_12_psp_sva_1[23]) ,
      fft_stage1_imag_conc_3_21_1 , fft_stage1_imag_conc_3_0}) + conv_s2u_23_24({(~
      (but_1_acc_12_psp_sva_1[23])) , (~ but_1_conc_9_ncse_21_1_sva_1) , (~ but_1_conc_9_ncse_0_sva_1)})
      + 24'b000000000000000000000001;
  assign but_4_acc_14_psp_sva_1 = nl_but_4_acc_14_psp_sva_1[23:0];
  assign nl_but_4_acc_13_psp_sva_1 = conv_s2u_23_24({(but_acc_psp_sva_1[23]) , fft_stage1_real_conc_3_21_1
      , fft_stage1_real_conc_3_0}) + conv_s2u_23_24({(~ (but_1_acc_psp_sva_1[23]))
      , (~ but_1_conc_8_ncse_21_1_sva_1) , (~ but_1_conc_8_ncse_0_sva_1)}) + 24'b000000000000000000000001;
  assign but_4_acc_13_psp_sva_1 = nl_but_4_acc_13_psp_sva_1[23:0];
  assign but_7_nor_ovfl_3_sva_1 = ~((but_7_acc_14_psp_sva_1[23:22]!=2'b01));
  assign but_7_and_unfl_3_sva_1 = (but_7_acc_14_psp_sva_1[23:22]==2'b10);
  assign but_7_nor_ovfl_2_sva_1 = ~((but_7_acc_13_psp_sva_1[23:22]!=2'b01));
  assign but_7_and_unfl_2_sva_1 = (but_7_acc_13_psp_sva_1[23:22]==2'b10);
  assign nl_but_6_acc_13_psp_sva_1 = conv_s2u_23_24({(but_2_acc_psp_sva_1[23]) ,
      but_2_conc_84_21_1 , but_2_conc_84_0}) + conv_s2u_23_24({(~ (but_3_acc_psp_sva_1[23]))
      , (~ but_3_conc_8_ncse_21_1_sva_1) , (~ but_3_conc_8_ncse_0_sva_1)}) + 24'b000000000000000000000001;
  assign but_6_acc_13_psp_sva_1 = nl_but_6_acc_13_psp_sva_1[23:0];
  assign but_6_nor_ovfl_2_sva_1 = ~((but_6_acc_13_psp_sva_1[23:22]!=2'b01));
  assign but_6_and_unfl_2_sva_1 = (but_6_acc_13_psp_sva_1[23:22]==2'b10);
  assign nl_but_6_acc_14_psp_sva_1 = conv_s2u_23_24({(but_2_acc_12_psp_sva_1[23])
      , but_2_conc_82_21_1 , but_2_conc_82_0}) + conv_s2u_23_24({(~ (but_3_acc_12_psp_sva_1[23]))
      , (~ but_3_conc_9_ncse_21_1_sva_1) , (~ but_3_conc_9_ncse_0_sva_1)}) + 24'b000000000000000000000001;
  assign but_6_acc_14_psp_sva_1 = nl_but_6_acc_14_psp_sva_1[23:0];
  assign but_6_nor_ovfl_3_sva_1 = ~((but_6_acc_14_psp_sva_1[23:22]!=2'b01));
  assign but_6_and_unfl_3_sva_1 = (but_6_acc_14_psp_sva_1[23:22]==2'b10);
  assign nl_but_4_acc_12_psp_sva_1 = conv_s2u_23_24({(but_acc_12_psp_sva_1[23]) ,
      fft_stage1_imag_conc_3_21_1 , fft_stage1_imag_conc_3_0}) + conv_s2u_23_24({(but_1_acc_12_psp_sva_1[23])
      , but_1_conc_9_ncse_21_1_sva_1 , but_1_conc_9_ncse_0_sva_1});
  assign but_4_acc_12_psp_sva_1 = nl_but_4_acc_12_psp_sva_1[23:0];
  assign nl_but_6_acc_12_psp_sva_1 = conv_s2u_23_24({(but_2_acc_12_psp_sva_1[23])
      , but_2_conc_82_21_1 , but_2_conc_82_0}) + conv_s2u_23_24({(but_3_acc_12_psp_sva_1[23])
      , but_3_conc_9_ncse_21_1_sva_1 , but_3_conc_9_ncse_0_sva_1});
  assign but_6_acc_12_psp_sva_1 = nl_but_6_acc_12_psp_sva_1[23:0];
  assign but_6_nor_12_nl = ~(MUX_v_21_2_2((but_6_acc_12_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_6_nor_ovfl_1_sva_1));
  assign but_6_conc_9_ncse_21_1_sva_1 = ~(MUX_v_21_2_2(but_6_nor_12_nl, 21'b111111111111111111111,
      but_6_and_unfl_1_sva_1));
  assign but_6_conc_9_ncse_0_sva_1 = ~((~((but_6_acc_12_psp_sva_1[0]) | but_6_nor_ovfl_1_sva_1))
      | but_6_and_unfl_1_sva_1);
  assign nl_but_4_acc_psp_sva_1 = conv_s2u_23_24({(but_acc_psp_sva_1[23]) , fft_stage1_real_conc_3_21_1
      , fft_stage1_real_conc_3_0}) + conv_s2u_23_24({(but_1_acc_psp_sva_1[23]) ,
      but_1_conc_8_ncse_21_1_sva_1 , but_1_conc_8_ncse_0_sva_1});
  assign but_4_acc_psp_sva_1 = nl_but_4_acc_psp_sva_1[23:0];
  assign nl_but_6_acc_psp_sva_1 = conv_s2u_23_24({(but_2_acc_psp_sva_1[23]) , but_2_conc_84_21_1
      , but_2_conc_84_0}) + conv_s2u_23_24({(but_3_acc_psp_sva_1[23]) , but_3_conc_8_ncse_21_1_sva_1
      , but_3_conc_8_ncse_0_sva_1});
  assign but_6_acc_psp_sva_1 = nl_but_6_acc_psp_sva_1[23:0];
  assign but_6_nor_9_nl = ~(MUX_v_21_2_2((but_6_acc_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_6_nor_ovfl_sva_1));
  assign but_6_conc_8_ncse_21_1_sva_1 = ~(MUX_v_21_2_2(but_6_nor_9_nl, 21'b111111111111111111111,
      but_6_and_unfl_sva_1));
  assign but_6_conc_8_ncse_0_sva_1 = ~((~((but_6_acc_psp_sva_1[0]) | but_6_nor_ovfl_sva_1))
      | but_6_and_unfl_sva_1);
  assign but_3_nor_15_nl = ~(MUX_v_21_2_2((but_3_acc_13_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_3_nor_ovfl_2_sva_1));
  assign but_7_but_3_or_2_nl = MUX_v_21_2_2(but_3_nor_15_nl, 21'b111111111111111111111,
      but_3_and_unfl_2_sva_1);
  assign but_7_but_3_or_3_nl = (~((but_3_acc_13_psp_sva_1[0]) | but_3_nor_ovfl_2_sva_1))
      | but_3_and_unfl_2_sva_1;
  assign nl_but_7_mul_2_psp_sva_1 = conv_s2s_23_24({(~ (but_3_acc_13_psp_sva_1[23]))
      , but_7_but_3_or_2_nl , but_7_but_3_or_3_nl}) + 24'b000000000000000000000001;
  assign but_7_mul_2_psp_sva_1 = nl_but_7_mul_2_psp_sva_1[23:0];
  assign but_3_nor_18_nl = ~(MUX_v_21_2_2((but_3_acc_14_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_3_nor_ovfl_3_sva_1));
  assign but_7_but_3_or_nl = MUX_v_21_2_2(but_3_nor_18_nl, 21'b111111111111111111111,
      but_3_and_unfl_3_sva_1);
  assign but_7_but_3_or_1_nl = (~((but_3_acc_14_psp_sva_1[0]) | but_3_nor_ovfl_3_sva_1))
      | but_3_and_unfl_3_sva_1;
  assign nl_but_7_mul_1_psp_sva_1 = conv_s2s_23_24({(~ (but_3_acc_14_psp_sva_1[23]))
      , but_7_but_3_or_nl , but_7_but_3_or_1_nl}) + 24'b000000000000000000000001;
  assign but_7_mul_1_psp_sva_1 = nl_but_7_mul_1_psp_sva_1[23:0];
  assign but_7_nor_ovfl_1_sva_1 = ~((but_7_acc_12_psp_sva_1[23:22]!=2'b01));
  assign but_7_and_unfl_1_sva_1 = (but_7_acc_12_psp_sva_1[23:22]==2'b10);
  assign nl_but_3_acc_13_psp_sva_1 = conv_s2u_23_24(cx_in_real_3_sva) - conv_s2u_23_24(cx_in_real_7_sva);
  assign but_3_acc_13_psp_sva_1 = nl_but_3_acc_13_psp_sva_1[23:0];
  assign but_3_nor_ovfl_2_sva_1 = ~((but_3_acc_13_psp_sva_1[23:22]!=2'b01));
  assign but_3_and_unfl_2_sva_1 = (but_3_acc_13_psp_sva_1[23:22]==2'b10);
  assign but_7_nor_ovfl_sva_1 = ~((but_7_acc_psp_sva_1[23:22]!=2'b01));
  assign but_7_and_unfl_sva_1 = (but_7_acc_psp_sva_1[23:22]==2'b10);
  assign nl_but_3_acc_14_psp_sva_1 = conv_s2u_23_24(cx_in_imag_3_sva) - conv_s2u_23_24(cx_in_imag_7_sva);
  assign but_3_acc_14_psp_sva_1 = nl_but_3_acc_14_psp_sva_1[23:0];
  assign but_3_nor_ovfl_3_sva_1 = ~((but_3_acc_14_psp_sva_1[23:22]!=2'b01));
  assign but_3_and_unfl_3_sva_1 = (but_3_acc_14_psp_sva_1[23:22]==2'b10);
  assign nl_but_2_acc_12_psp_sva_1 = conv_s2u_23_24(cx_in_imag_1_sva) + conv_s2u_23_24(cx_in_imag_5_sva);
  assign but_2_acc_12_psp_sva_1 = nl_but_2_acc_12_psp_sva_1[23:0];
  assign nl_but_3_acc_12_psp_sva_1 = conv_s2u_23_24(cx_in_imag_3_sva) + conv_s2u_23_24(cx_in_imag_7_sva);
  assign but_3_acc_12_psp_sva_1 = nl_but_3_acc_12_psp_sva_1[23:0];
  assign but_3_nor_12_nl = ~(MUX_v_21_2_2((but_3_acc_12_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_3_nor_ovfl_1_sva_1));
  assign but_3_conc_9_ncse_21_1_sva_1 = ~(MUX_v_21_2_2(but_3_nor_12_nl, 21'b111111111111111111111,
      but_3_and_unfl_1_sva_1));
  assign but_3_conc_9_ncse_0_sva_1 = ~((~((but_3_acc_12_psp_sva_1[0]) | but_3_nor_ovfl_1_sva_1))
      | but_3_and_unfl_1_sva_1);
  assign nl_but_2_acc_psp_sva_1 = conv_s2u_23_24(cx_in_real_1_sva) + conv_s2u_23_24(cx_in_real_5_sva);
  assign but_2_acc_psp_sva_1 = nl_but_2_acc_psp_sva_1[23:0];
  assign nl_but_3_acc_psp_sva_1 = conv_s2u_23_24(cx_in_real_3_sva) + conv_s2u_23_24(cx_in_real_7_sva);
  assign but_3_acc_psp_sva_1 = nl_but_3_acc_psp_sva_1[23:0];
  assign but_3_nor_9_nl = ~(MUX_v_21_2_2((but_3_acc_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_3_nor_ovfl_sva_1));
  assign but_3_conc_8_ncse_21_1_sva_1 = ~(MUX_v_21_2_2(but_3_nor_9_nl, 21'b111111111111111111111,
      but_3_and_unfl_sva_1));
  assign but_3_conc_8_ncse_0_sva_1 = ~((~((but_3_acc_psp_sva_1[0]) | but_3_nor_ovfl_sva_1))
      | but_3_and_unfl_sva_1);
  assign but_6_nor_ovfl_1_sva_1 = ~((but_6_acc_12_psp_sva_1[23:22]!=2'b01));
  assign but_6_and_unfl_1_sva_1 = (but_6_acc_12_psp_sva_1[23:22]==2'b10);
  assign but_6_nor_ovfl_sva_1 = ~((but_6_acc_psp_sva_1[23:22]!=2'b01));
  assign but_6_and_unfl_sva_1 = (but_6_acc_psp_sva_1[23:22]==2'b10);
  assign but_5_nor_ovfl_3_sva_1 = ~((but_5_acc_14_psp_sva_1[23:22]!=2'b01));
  assign but_5_and_unfl_3_sva_1 = (but_5_acc_14_psp_sva_1[23:22]==2'b10);
  assign but_1_nor_15_nl = ~(MUX_v_21_2_2((but_1_acc_13_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_1_nor_ovfl_2_sva_1));
  assign but_5_but_1_or_2_nl = MUX_v_21_2_2(but_1_nor_15_nl, 21'b111111111111111111111,
      but_1_and_unfl_2_sva_1);
  assign but_5_but_1_or_3_nl = (~((but_1_acc_13_psp_sva_1[0]) | but_1_nor_ovfl_2_sva_1))
      | but_1_and_unfl_2_sva_1;
  assign nl_but_5_mul_2_psp_sva_1 = conv_s2s_23_24({(~ (but_1_acc_13_psp_sva_1[23]))
      , but_5_but_1_or_2_nl , but_5_but_1_or_3_nl}) + 24'b000000000000000000000001;
  assign but_5_mul_2_psp_sva_1 = nl_but_5_mul_2_psp_sva_1[23:0];
  assign nl_but_acc_14_psp_sva_1 = conv_s2u_23_24(cx_in_imag_0_sva) - conv_s2u_23_24(cx_in_imag_4_sva);
  assign but_acc_14_psp_sva_1 = nl_but_acc_14_psp_sva_1[23:0];
  assign but_5_nor_ovfl_2_sva_1 = ~((but_5_acc_13_psp_sva_1[23:22]!=2'b01));
  assign but_5_and_unfl_2_sva_1 = (but_5_acc_13_psp_sva_1[23:22]==2'b10);
  assign nl_but_acc_13_psp_sva_1 = conv_s2u_23_24(cx_in_real_0_sva) - conv_s2u_23_24(cx_in_real_4_sva);
  assign but_acc_13_psp_sva_1 = nl_but_acc_13_psp_sva_1[23:0];
  assign but_1_nor_18_nl = ~(MUX_v_21_2_2((but_1_acc_14_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_1_nor_ovfl_3_sva_1));
  assign but_5_but_1_or_nl = MUX_v_21_2_2(but_1_nor_18_nl, 21'b111111111111111111111,
      but_1_and_unfl_3_sva_1);
  assign but_5_but_1_or_1_nl = (~((but_1_acc_14_psp_sva_1[0]) | but_1_nor_ovfl_3_sva_1))
      | but_1_and_unfl_3_sva_1;
  assign nl_but_5_mul_1_psp_sva_1 = conv_s2s_23_24({(~ (but_1_acc_14_psp_sva_1[23]))
      , but_5_but_1_or_nl , but_5_but_1_or_1_nl}) + 24'b000000000000000000000001;
  assign but_5_mul_1_psp_sva_1 = nl_but_5_mul_1_psp_sva_1[23:0];
  assign but_5_nor_ovfl_1_sva_1 = ~((but_5_acc_12_psp_sva_1[23:22]!=2'b01));
  assign but_5_and_unfl_1_sva_1 = (but_5_acc_12_psp_sva_1[23:22]==2'b10);
  assign nl_but_1_acc_13_psp_sva_1 = conv_s2u_23_24(cx_in_real_2_sva) - conv_s2u_23_24(cx_in_real_6_sva);
  assign but_1_acc_13_psp_sva_1 = nl_but_1_acc_13_psp_sva_1[23:0];
  assign but_1_nor_ovfl_2_sva_1 = ~((but_1_acc_13_psp_sva_1[23:22]!=2'b01));
  assign but_1_and_unfl_2_sva_1 = (but_1_acc_13_psp_sva_1[23:22]==2'b10);
  assign but_5_nor_ovfl_sva_1 = ~((but_5_acc_psp_sva_1[23:22]!=2'b01));
  assign but_5_and_unfl_sva_1 = (but_5_acc_psp_sva_1[23:22]==2'b10);
  assign nl_but_1_acc_14_psp_sva_1 = conv_s2u_23_24(cx_in_imag_2_sva) - conv_s2u_23_24(cx_in_imag_6_sva);
  assign but_1_acc_14_psp_sva_1 = nl_but_1_acc_14_psp_sva_1[23:0];
  assign but_1_nor_ovfl_3_sva_1 = ~((but_1_acc_14_psp_sva_1[23:22]!=2'b01));
  assign but_1_and_unfl_3_sva_1 = (but_1_acc_14_psp_sva_1[23:22]==2'b10);
  assign but_4_nor_ovfl_3_sva_1 = ~((but_4_acc_14_psp_sva_1[23:22]!=2'b01));
  assign but_4_and_unfl_3_sva_1 = (but_4_acc_14_psp_sva_1[23:22]==2'b10);
  assign nl_but_acc_12_psp_sva_1 = conv_s2u_23_24(cx_in_imag_0_sva) + conv_s2u_23_24(cx_in_imag_4_sva);
  assign but_acc_12_psp_sva_1 = nl_but_acc_12_psp_sva_1[23:0];
  assign nl_but_1_acc_12_psp_sva_1 = conv_s2u_23_24(cx_in_imag_2_sva) + conv_s2u_23_24(cx_in_imag_6_sva);
  assign but_1_acc_12_psp_sva_1 = nl_but_1_acc_12_psp_sva_1[23:0];
  assign but_1_nor_12_nl = ~(MUX_v_21_2_2((but_1_acc_12_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_1_nor_ovfl_1_sva_1));
  assign but_1_conc_9_ncse_21_1_sva_1 = ~(MUX_v_21_2_2(but_1_nor_12_nl, 21'b111111111111111111111,
      but_1_and_unfl_1_sva_1));
  assign but_1_conc_9_ncse_0_sva_1 = ~((~((but_1_acc_12_psp_sva_1[0]) | but_1_nor_ovfl_1_sva_1))
      | but_1_and_unfl_1_sva_1);
  assign but_4_nor_ovfl_2_sva_1 = ~((but_4_acc_13_psp_sva_1[23:22]!=2'b01));
  assign but_4_and_unfl_2_sva_1 = (but_4_acc_13_psp_sva_1[23:22]==2'b10);
  assign nl_but_acc_psp_sva_1 = conv_s2u_23_24(cx_in_real_0_sva) + conv_s2u_23_24(cx_in_real_4_sva);
  assign but_acc_psp_sva_1 = nl_but_acc_psp_sva_1[23:0];
  assign nl_but_1_acc_psp_sva_1 = conv_s2u_23_24(cx_in_real_2_sva) + conv_s2u_23_24(cx_in_real_6_sva);
  assign but_1_acc_psp_sva_1 = nl_but_1_acc_psp_sva_1[23:0];
  assign but_1_nor_9_nl = ~(MUX_v_21_2_2((but_1_acc_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_1_nor_ovfl_sva_1));
  assign but_1_conc_8_ncse_21_1_sva_1 = ~(MUX_v_21_2_2(but_1_nor_9_nl, 21'b111111111111111111111,
      but_1_and_unfl_sva_1));
  assign but_1_conc_8_ncse_0_sva_1 = ~((~((but_1_acc_psp_sva_1[0]) | but_1_nor_ovfl_sva_1))
      | but_1_and_unfl_sva_1);
  assign but_4_nor_ovfl_1_sva_1 = ~((but_4_acc_12_psp_sva_1[23:22]!=2'b01));
  assign but_4_and_unfl_1_sva_1 = (but_4_acc_12_psp_sva_1[23:22]==2'b10);
  assign but_4_nor_ovfl_sva_1 = ~((but_4_acc_psp_sva_1[23:22]!=2'b01));
  assign but_4_and_unfl_sva_1 = (but_4_acc_psp_sva_1[23:22]==2'b10);
  assign but_3_nor_ovfl_1_sva_1 = ~((but_3_acc_12_psp_sva_1[23:22]!=2'b01));
  assign but_3_and_unfl_1_sva_1 = (but_3_acc_12_psp_sva_1[23:22]==2'b10);
  assign but_3_nor_ovfl_sva_1 = ~((but_3_acc_psp_sva_1[23:22]!=2'b01));
  assign but_3_and_unfl_sva_1 = (but_3_acc_psp_sva_1[23:22]==2'b10);
  assign but_2_nor_ovfl_3_sva_1 = ~((z_out[23:22]!=2'b01));
  assign but_2_and_unfl_3_sva_1 = (z_out[23:22]==2'b10);
  assign but_2_nor_ovfl_2_sva_1 = ~((z_out_1[23:22]!=2'b01));
  assign but_2_and_unfl_2_sva_1 = (z_out_1[23:22]==2'b10);
  assign but_2_nor_ovfl_1_sva_1 = ~((but_2_acc_12_psp_sva_1[23:22]!=2'b01));
  assign but_2_and_unfl_1_sva_1 = (but_2_acc_12_psp_sva_1[23:22]==2'b10);
  assign but_2_nor_ovfl_sva_1 = ~((but_2_acc_psp_sva_1[23:22]!=2'b01));
  assign but_2_and_unfl_sva_1 = (but_2_acc_psp_sva_1[23:22]==2'b10);
  assign but_1_nor_ovfl_1_sva_1 = ~((but_1_acc_12_psp_sva_1[23:22]!=2'b01));
  assign but_1_and_unfl_1_sva_1 = (but_1_acc_12_psp_sva_1[23:22]==2'b10);
  assign but_1_nor_ovfl_sva_1 = ~((but_1_acc_psp_sva_1[23:22]!=2'b01));
  assign but_1_and_unfl_sva_1 = (but_1_acc_psp_sva_1[23:22]==2'b10);
  assign but_nor_ovfl_3_sva_1 = ~((but_acc_14_psp_sva_1[23:22]!=2'b01));
  assign but_and_unfl_3_sva_1 = (but_acc_14_psp_sva_1[23:22]==2'b10);
  assign but_nor_ovfl_2_sva_1 = ~((but_acc_13_psp_sva_1[23:22]!=2'b01));
  assign but_and_unfl_2_sva_1 = (but_acc_13_psp_sva_1[23:22]==2'b10);
  assign but_nor_ovfl_1_sva_1 = ~((but_acc_12_psp_sva_1[23:22]!=2'b01));
  assign but_and_unfl_1_sva_1 = (but_acc_12_psp_sva_1[23:22]==2'b10);
  assign but_nor_ovfl_sva_1 = ~((but_acc_psp_sva_1[23:22]!=2'b01));
  assign but_and_unfl_sva_1 = (but_acc_psp_sva_1[23:22]==2'b10);
  assign but_4_nor_12_nl = ~(MUX_v_21_2_2((but_4_acc_12_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_4_nor_ovfl_1_sva_1));
  assign fft_stage2_imag_conc_3_21_1 = ~(MUX_v_21_2_2(but_4_nor_12_nl, 21'b111111111111111111111,
      but_4_and_unfl_1_sva_1));
  assign fft_stage2_imag_conc_3_0 = ~((~((but_4_acc_12_psp_sva_1[0]) | but_4_nor_ovfl_1_sva_1))
      | but_4_and_unfl_1_sva_1);
  assign but_4_nor_9_nl = ~(MUX_v_21_2_2((but_4_acc_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_4_nor_ovfl_sva_1));
  assign fft_stage2_real_conc_3_21_1 = ~(MUX_v_21_2_2(but_4_nor_9_nl, 21'b111111111111111111111,
      but_4_and_unfl_sva_1));
  assign fft_stage2_real_conc_3_0 = ~((~((but_4_acc_psp_sva_1[0]) | but_4_nor_ovfl_sva_1))
      | but_4_and_unfl_sva_1);
  assign but_2_nor_18_nl = ~(MUX_v_21_2_2((z_out[21:1]), 21'b111111111111111111111,
      but_2_nor_ovfl_3_sva_1));
  assign but_2_conc_78_21_1 = ~(MUX_v_21_2_2(but_2_nor_18_nl, 21'b111111111111111111111,
      but_2_and_unfl_3_sva_1));
  assign but_2_conc_78_0 = ~((~((z_out[0]) | but_2_nor_ovfl_3_sva_1)) | but_2_and_unfl_3_sva_1);
  assign but_2_nor_15_nl = ~(MUX_v_21_2_2((z_out_1[21:1]), 21'b111111111111111111111,
      but_2_nor_ovfl_2_sva_1));
  assign but_2_conc_80_21_1 = ~(MUX_v_21_2_2(but_2_nor_15_nl, 21'b111111111111111111111,
      but_2_and_unfl_2_sva_1));
  assign but_2_conc_80_0 = ~((~((z_out_1[0]) | but_2_nor_ovfl_2_sva_1)) | but_2_and_unfl_2_sva_1);
  assign but_2_nor_12_nl = ~(MUX_v_21_2_2((but_2_acc_12_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_2_nor_ovfl_1_sva_1));
  assign but_2_conc_82_21_1 = ~(MUX_v_21_2_2(but_2_nor_12_nl, 21'b111111111111111111111,
      but_2_and_unfl_1_sva_1));
  assign but_2_conc_82_0 = ~((~((but_2_acc_12_psp_sva_1[0]) | but_2_nor_ovfl_1_sva_1))
      | but_2_and_unfl_1_sva_1);
  assign but_2_nor_9_nl = ~(MUX_v_21_2_2((but_2_acc_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_2_nor_ovfl_sva_1));
  assign but_2_conc_84_21_1 = ~(MUX_v_21_2_2(but_2_nor_9_nl, 21'b111111111111111111111,
      but_2_and_unfl_sva_1));
  assign but_2_conc_84_0 = ~((~((but_2_acc_psp_sva_1[0]) | but_2_nor_ovfl_sva_1))
      | but_2_and_unfl_sva_1);
  assign but_nor_18_nl = ~(MUX_v_21_2_2((but_acc_14_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_nor_ovfl_3_sva_1));
  assign but_conc_72_21_1 = ~(MUX_v_21_2_2(but_nor_18_nl, 21'b111111111111111111111,
      but_and_unfl_3_sva_1));
  assign but_conc_72_0 = ~((~((but_acc_14_psp_sva_1[0]) | but_nor_ovfl_3_sva_1))
      | but_and_unfl_3_sva_1);
  assign but_nor_15_nl = ~(MUX_v_21_2_2((but_acc_13_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_nor_ovfl_2_sva_1));
  assign but_conc_74_21_1 = ~(MUX_v_21_2_2(but_nor_15_nl, 21'b111111111111111111111,
      but_and_unfl_2_sva_1));
  assign but_conc_74_0 = ~((~((but_acc_13_psp_sva_1[0]) | but_nor_ovfl_2_sva_1))
      | but_and_unfl_2_sva_1);
  assign but_nor_12_nl = ~(MUX_v_21_2_2((but_acc_12_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_nor_ovfl_1_sva_1));
  assign fft_stage1_imag_conc_3_21_1 = ~(MUX_v_21_2_2(but_nor_12_nl, 21'b111111111111111111111,
      but_and_unfl_1_sva_1));
  assign fft_stage1_imag_conc_3_0 = ~((~((but_acc_12_psp_sva_1[0]) | but_nor_ovfl_1_sva_1))
      | but_and_unfl_1_sva_1);
  assign but_nor_9_nl = ~(MUX_v_21_2_2((but_acc_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_nor_ovfl_sva_1));
  assign fft_stage1_real_conc_3_21_1 = ~(MUX_v_21_2_2(but_nor_9_nl, 21'b111111111111111111111,
      but_and_unfl_sva_1));
  assign fft_stage1_real_conc_3_0 = ~((~((but_acc_psp_sva_1[0]) | but_nor_ovfl_sva_1))
      | but_and_unfl_sva_1);
  assign nl_but_10_acc_14_psp_sva_1 = conv_s2s_23_24({but_4_acc_14_psp_sva_23 , but_4_conc_11_ncse_21_1_sva
      , but_4_conc_11_ncse_0_sva}) - but_10_mul_2_psp_sva;
  assign but_10_acc_14_psp_sva_1 = nl_but_10_acc_14_psp_sva_1[23:0];
  assign but_10_nor_ovfl_3_sva_1 = ~((but_10_acc_14_psp_sva_1[23:22]!=2'b01));
  assign but_10_and_unfl_3_sva_1 = (but_10_acc_14_psp_sva_1[23:22]==2'b10);
  assign nl_but_10_acc_12_psp_sva_1 = conv_s2s_23_24({but_4_acc_14_psp_sva_23 , but_4_conc_11_ncse_21_1_sva
      , but_4_conc_11_ncse_0_sva}) + but_10_mul_2_psp_sva;
  assign but_10_acc_12_psp_sva_1 = nl_but_10_acc_12_psp_sva_1[23:0];
  assign but_10_nor_ovfl_1_sva_1 = ~((but_10_acc_12_psp_sva_1[23:22]!=2'b01));
  assign but_10_and_unfl_1_sva_1 = (but_10_acc_12_psp_sva_1[23:22]==2'b10);
  assign nl_but_10_acc_13_psp_sva_1 = conv_s2s_23_24({but_4_acc_13_psp_sva_23 , but_4_conc_10_ncse_21_1_sva
      , but_4_conc_10_ncse_0_sva}) + but_10_mul_1_psp_sva;
  assign but_10_acc_13_psp_sva_1 = nl_but_10_acc_13_psp_sva_1[23:0];
  assign but_10_nor_ovfl_2_sva_1 = ~((but_10_acc_13_psp_sva_1[23:22]!=2'b01));
  assign but_10_and_unfl_2_sva_1 = (but_10_acc_13_psp_sva_1[23:22]==2'b10);
  assign nl_but_10_acc_psp_sva_1 = conv_s2s_23_24({but_4_acc_13_psp_sva_23 , but_4_conc_10_ncse_21_1_sva
      , but_4_conc_10_ncse_0_sva}) - but_10_mul_1_psp_sva;
  assign but_10_acc_psp_sva_1 = nl_but_10_acc_psp_sva_1[23:0];
  assign but_10_nor_ovfl_sva_1 = ~((but_10_acc_psp_sva_1[23:22]!=2'b01));
  assign but_10_and_unfl_sva_1 = (but_10_acc_psp_sva_1[23:22]==2'b10);
  assign but_11_nor_ovfl_3_sva_1 = ~((z_out_9[24]) | (~((z_out_9[23:22]!=2'b00))));
  assign but_11_and_unfl_3_sva_1 = (z_out_9[24]) & (~((z_out_9[23:22]==2'b11)));
  assign but_11_nor_ovfl_1_sva_1 = ~((z_out_10[24]) | (~((z_out_10[23:22]!=2'b00))));
  assign but_11_and_unfl_1_sva_1 = (z_out_10[24]) & (~((z_out_10[23:22]==2'b11)));
  assign but_11_and_10_nl = (reg_but_11_acc_14_cse[4]) & ((reg_but_11_acc_14_cse[3:0]!=4'b0000)
      | (~ (z_out_2[24])));
  assign nl_but_11_acc_8_psp_1_sva_1 = z_out_2 + conv_u2s_1_25(but_11_and_10_nl);
  assign but_11_acc_8_psp_1_sva_1 = nl_but_11_acc_8_psp_1_sva_1[24:0];
  assign but_11_nor_ovfl_2_sva_1 = ~((but_11_acc_8_psp_1_sva_1[24]) | (~((but_11_acc_8_psp_1_sva_1[23:22]!=2'b00))));
  assign but_11_and_unfl_2_sva_1 = (but_11_acc_8_psp_1_sva_1[24]) & (~((but_11_acc_8_psp_1_sva_1[23:22]==2'b11)));
  assign but_11_and_nl = (but_11_acc_12_itm[4]) & ((but_11_acc_12_itm[3:0]!=4'b0000)
      | (~ (z_out[24])));
  assign nl_but_11_acc_2_psp_1_sva_1 = (z_out[24:0]) + conv_u2s_1_25(but_11_and_nl);
  assign but_11_acc_2_psp_1_sva_1 = nl_but_11_acc_2_psp_1_sva_1[24:0];
  assign but_11_nor_ovfl_sva_1 = ~((but_11_acc_2_psp_1_sva_1[24]) | (~((but_11_acc_2_psp_1_sva_1[23:22]!=2'b00))));
  assign but_11_and_unfl_sva_1 = (but_11_acc_2_psp_1_sva_1[24]) & (~((but_11_acc_2_psp_1_sva_1[23:22]==2'b11)));
  assign nl_but_11_acc_17_psp_1 = conv_s2u_24_25(but_11_acc_13_itm[28:5]) + conv_s2u_23_25({but_5_acc_14_psp_sva_23
      , but_5_conc_11_ncse_21_1_sva , but_5_conc_11_ncse_0_sva});
  assign but_11_acc_17_psp_1 = nl_but_11_acc_17_psp_1[24:0];
  assign or_101_ssc = and_cse | (~ data_valid_source);
  assign i_sva_dfm_mx0_31_4 = MUX_v_28_2_2((z_out[31:4]), i_sva_31_4, or_101_ssc);
  assign i_sva_dfm_mx0_3 = MUX_s_1_2_2((z_out[3]), i_sva_3, or_101_ssc);
  assign i_sva_dfm_mx0_2_0 = MUX_v_3_2_2((z_out[2:0]), i_sva_2_0, or_101_ssc);
  assign j_sva_dfm_mx0_31_4 = MUX_v_28_2_2((z_out_1[31:4]), j_sva_31_4, or_dcpl_31);
  assign j_sva_dfm_mx0_3 = MUX_s_1_2_2((z_out_1[3]), j_sva_3, or_dcpl_31);
  assign j_sva_dfm_mx0_2_0 = MUX_v_3_2_2((z_out_1[2:0]), j_sva_2_0, or_dcpl_31);
  assign while_if_aelse_2_nor_tmp = ~((j_sva_dfm_mx0_31_4!=28'b0000000000000000000000000000)
      | (j_sva_dfm_mx0_2_0!=3'b000));
  assign while_if_if_3_nor_1_tmp = ~((i_sva_dfm_mx0_31_4!=28'b0000000000000000000000000000)
      | (i_sva_dfm_mx0_2_0!=3'b000));
  assign while_if_land_2_lpi_1_dfm_1 = j_sva_dfm_mx0_3 & while_if_aelse_2_nor_tmp
      & i_sva_dfm_mx0_3 & while_if_if_3_nor_1_tmp;
  assign and_cse = while_if_aelse_nor_itm & i_sva_3;
  assign or_23_nl = and_cse | (z_out[3]);
  assign mux_tmp = MUX_s_1_2_2(i_sva_3, or_23_nl, data_valid_source);
  assign and_380_cse = j_sva_3 & while_if_if_nor_cse_sva;
  assign and_dcpl_9 = ~((fsm_output[7]) | (fsm_output[0]));
  assign or_dcpl_31 = and_380_cse | (~ data_req_sink);
  assign or_dcpl_42 = (~((i_sva_2_0[1]) & data_valid_source)) | processing_sva;
  assign or_dcpl_44 = and_cse | (i_sva_2_0[2]) | (~ (i_sva_2_0[0]));
  assign or_dcpl_47 = and_cse | (~((i_sva_2_0[2]) & (i_sva_2_0[0])));
  assign or_dcpl_50 = (i_sva_2_0[1]) | (~ data_valid_source) | processing_sva;
  assign or_dcpl_54 = and_cse | (i_sva_2_0[2]) | (i_sva_2_0[0]);
  assign or_dcpl_57 = and_cse | (~ (i_sva_2_0[2])) | (i_sva_2_0[0]);
  assign or_tmp_90 = processing_sva | (~ (fsm_output[7]));
  assign or_tmp_101 = and_380_cse | (~ data_req_sink) | processing_sva | (~ (fsm_output[7]));
  assign or_tmp_109 = ~((fsm_output[0]) & processing_sva);
  assign or_tmp_120 = (fsm_output[4:1]!=4'b0000);
  assign or_tmp_123 = and_dcpl_9 & (~ (fsm_output[6]));
  assign or_tmp_126 = (fsm_output[2:1]!=2'b00);
  assign or_tmp_154 = processing_sva & (fsm_output[1]);
  assign or_tmp_170 = processing_sva & (fsm_output[3]);
  assign or_tmp_182 = processing_sva & (fsm_output[6]);
  assign data_valid_sink_mx0c1 = ((or_dcpl_31 & while_if_while_if_if_and_itm) | processing_sva)
      & (fsm_output[7]);
  assign and_69_nl = j_sva_3 & mux_tmp;
  assign and_68_nl = j_sva_3 & while_if_if_nor_cse_sva & mux_tmp;
  assign mux_19_nl = MUX_s_1_2_2(and_68_nl, mux_tmp, z_out_1[3]);
  assign mux_20_nl = MUX_s_1_2_2(and_69_nl, mux_19_nl, data_req_sink);
  assign data_req_source_mx0c0 = mux_20_nl & while_if_if_3_nor_1_tmp & while_if_aelse_2_nor_tmp
      & (~ processing_sva) & (fsm_output[7]);
  assign but_11_or_19_cse = (fsm_output[4]) | (fsm_output[6]);
  assign but_11_or_20_cse = (fsm_output[3]) | (fsm_output[5]);
  always @(posedge clk) begin
    if ( rst ) begin
      while_if_aelse_nor_itm <= 1'b0;
    end
    else if ( ~ and_dcpl_9 ) begin
      while_if_aelse_nor_itm <= ~((i_sva_31_4!=28'b0000000000000000000000000000)
          | (i_sva_2_0!=3'b000));
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      while_if_while_if_if_and_itm <= 1'b0;
    end
    else if ( ~ and_dcpl_9 ) begin
      while_if_while_if_if_and_itm <= j_sva_3 & while_if_if_nor_tmp;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      while_if_if_nor_cse_sva <= 1'b0;
    end
    else if ( ~ and_dcpl_9 ) begin
      while_if_if_nor_cse_sva <= while_if_if_nor_tmp;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      but_8_acc_12_psp_lpi_1_23 <= but_8_acc_12_psp_lpi_1_dfm_23;
    end
  end
  always @(posedge clk) begin
    if ( reg_but_9_but_9_and_cse ) begin
      but_9_acc_5_psp_1_lpi_1_dfm_24 <= z_out_10[24];
      but_9_acc_11_psp_1_lpi_1_dfm_24 <= z_out_9[24];
      cx_out_imag_1_21_1_sva_dfm <= but_9_but_9_nor_4_cse;
      cx_out_imag_5_21_1_sva_dfm <= but_9_but_9_nor_10_cse;
      cx_out_imag_1_0_sva_dfm <= but_9_but_9_nor_5_cse;
      cx_out_imag_5_0_sva_dfm <= but_9_but_9_nor_11_cse;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      but_10_acc_12_psp_lpi_1_23 <= but_10_acc_12_psp_lpi_1_dfm_23;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      but_11_acc_5_psp_1_lpi_1_24 <= but_11_acc_5_psp_1_lpi_1_dfm_24;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      but_8_acc_14_psp_lpi_1_23 <= but_8_acc_14_psp_lpi_1_dfm_23;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      but_10_acc_14_psp_lpi_1_23 <= but_10_acc_14_psp_lpi_1_dfm_23;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      but_11_acc_11_psp_1_lpi_1_24 <= but_11_acc_11_psp_1_lpi_1_dfm_24;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_imag_2_21_1_sva <= cx_out_imag_2_21_1_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_imag_3_21_1_sva <= cx_out_imag_3_21_1_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_imag_4_21_1_sva <= cx_out_imag_4_21_1_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_imag_6_21_1_sva <= cx_out_imag_6_21_1_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_imag_7_21_1_sva <= cx_out_imag_7_21_1_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_imag_0_0_sva <= cx_out_imag_0_0_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_imag_2_0_sva <= cx_out_imag_2_0_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_imag_3_0_sva <= cx_out_imag_3_0_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_imag_4_0_sva <= cx_out_imag_4_0_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_imag_6_0_sva <= cx_out_imag_6_0_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_imag_7_0_sva <= cx_out_imag_7_0_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      but_8_acc_psp_lpi_1_23 <= but_8_acc_psp_lpi_1_dfm_23;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      but_9_acc_2_psp_1_lpi_1_24 <= but_9_acc_2_psp_1_lpi_1_dfm_24;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      but_10_acc_psp_lpi_1_23 <= but_10_acc_psp_lpi_1_dfm_23;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      but_11_acc_2_psp_1_lpi_1_24 <= but_11_acc_2_psp_1_lpi_1_dfm_24;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      but_8_acc_13_psp_lpi_1_23 <= but_8_acc_13_psp_lpi_1_dfm_23;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      but_9_acc_8_psp_1_lpi_1_24 <= but_9_acc_8_psp_1_lpi_1_dfm_24;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      but_10_acc_13_psp_lpi_1_23 <= but_10_acc_13_psp_lpi_1_dfm_23;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      but_11_acc_8_psp_1_lpi_1_24 <= but_11_acc_8_psp_1_lpi_1_dfm_24;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_real_0_21_1_sva <= cx_out_real_0_21_1_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_real_1_21_1_sva <= cx_out_real_1_21_1_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_real_2_21_1_sva <= cx_out_real_2_21_1_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_real_3_21_1_sva <= cx_out_real_3_21_1_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_real_4_21_1_sva <= cx_out_real_4_21_1_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_real_5_21_1_sva <= cx_out_real_5_21_1_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_real_6_21_1_sva <= cx_out_real_6_21_1_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_real_7_21_1_sva <= cx_out_real_7_21_1_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_real_0_0_sva <= cx_out_real_0_0_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_real_1_0_sva <= cx_out_real_1_0_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_real_2_0_sva <= cx_out_real_2_0_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_real_3_0_sva <= cx_out_real_3_0_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_real_4_0_sva <= cx_out_real_4_0_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_real_5_0_sva <= cx_out_real_5_0_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_real_6_0_sva <= cx_out_real_6_0_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( fsm_output[7] ) begin
      cx_out_real_7_0_sva <= cx_out_real_7_0_sva_dfm;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      i_sva_31_4 <= 28'b0000000000000000000000000000;
    end
    else if ( ~ or_tmp_90 ) begin
      i_sva_31_4 <= i_sva_dfm_mx0_31_4;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      i_sva_2_0 <= 3'b000;
    end
    else if ( ~ or_tmp_90 ) begin
      i_sva_2_0 <= i_sva_dfm_mx0_2_0;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      j_sva_3 <= 1'b1;
    end
    else if ( ~ or_tmp_90 ) begin
      j_sva_3 <= j_sva_dfm_mx0_3 & (~ while_if_land_2_lpi_1_dfm_1);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      j_sva_31_4 <= 28'b0000000000000000000000000000;
    end
    else if ( ~ or_tmp_90 ) begin
      j_sva_31_4 <= j_sva_dfm_mx0_31_4;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      j_sva_2_0 <= 3'b000;
    end
    else if ( ~ or_tmp_90 ) begin
      j_sva_2_0 <= j_sva_dfm_mx0_2_0;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      data_valid_sink <= 1'b0;
    end
    else if ( ((~(while_if_if_nor_cse_sva & j_sva_3)) & data_req_sink & (~ processing_sva)
        & (fsm_output[7])) | data_valid_sink_mx0c1 ) begin
      data_valid_sink <= ~ data_valid_sink_mx0c1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      data_req_source <= 1'b1;
    end
    else if ( data_req_source_mx0c0 | reg_but_9_but_9_and_cse ) begin
      data_req_source <= ~ data_req_source_mx0c0;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      while_if_if_2_mux_9 <= 1'b0;
    end
    else if ( ~ or_tmp_101 ) begin
      while_if_if_2_mux_9 <= MUX_s_1_8_2(but_8_acc_12_psp_lpi_1_23, but_9_acc_5_psp_1_lpi_1_dfm_24,
          but_10_acc_12_psp_lpi_1_23, but_11_acc_5_psp_1_lpi_1_24, but_8_acc_14_psp_lpi_1_23,
          but_9_acc_11_psp_1_lpi_1_dfm_24, but_10_acc_14_psp_lpi_1_23, but_11_acc_11_psp_1_lpi_1_24,
          j_sva_2_0);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      while_if_if_2_mux_10 <= 21'b000000000000000000000;
    end
    else if ( ~ or_tmp_101 ) begin
      while_if_if_2_mux_10 <= MUX_v_21_8_2(reg_but_11_mul_1_psp_ftd_1, cx_out_imag_1_21_1_sva_dfm,
          cx_out_imag_2_21_1_sva, cx_out_imag_3_21_1_sva, cx_out_imag_4_21_1_sva,
          cx_out_imag_5_21_1_sva_dfm, cx_out_imag_6_21_1_sva, cx_out_imag_7_21_1_sva,
          j_sva_2_0);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      while_if_if_2_mux_11 <= 1'b0;
    end
    else if ( ~ or_tmp_101 ) begin
      while_if_if_2_mux_11 <= MUX_s_1_8_2(cx_out_imag_0_0_sva, cx_out_imag_1_0_sva_dfm,
          cx_out_imag_2_0_sva, cx_out_imag_3_0_sva, cx_out_imag_4_0_sva, cx_out_imag_5_0_sva_dfm,
          cx_out_imag_6_0_sva, cx_out_imag_7_0_sva, j_sva_2_0);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      while_if_if_2_mux_3 <= 1'b0;
    end
    else if ( ~ or_tmp_101 ) begin
      while_if_if_2_mux_3 <= MUX_s_1_8_2(but_8_acc_psp_lpi_1_23, but_9_acc_2_psp_1_lpi_1_24,
          but_10_acc_psp_lpi_1_23, but_11_acc_2_psp_1_lpi_1_24, but_8_acc_13_psp_lpi_1_23,
          but_9_acc_8_psp_1_lpi_1_24, but_10_acc_13_psp_lpi_1_23, but_11_acc_8_psp_1_lpi_1_24,
          j_sva_2_0);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      while_if_if_2_mux_4 <= 21'b000000000000000000000;
    end
    else if ( ~ or_tmp_101 ) begin
      while_if_if_2_mux_4 <= MUX_v_21_8_2(cx_out_real_0_21_1_sva, cx_out_real_1_21_1_sva,
          cx_out_real_2_21_1_sva, cx_out_real_3_21_1_sva, cx_out_real_4_21_1_sva,
          cx_out_real_5_21_1_sva, cx_out_real_6_21_1_sva, cx_out_real_7_21_1_sva,
          j_sva_2_0);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      while_if_if_2_mux_5 <= 1'b0;
    end
    else if ( ~ or_tmp_101 ) begin
      while_if_if_2_mux_5 <= MUX_s_1_8_2(cx_out_real_0_0_sva, cx_out_real_1_0_sva,
          cx_out_real_2_0_sva, cx_out_real_3_0_sva, cx_out_real_4_0_sva, cx_out_real_5_0_sva,
          cx_out_real_6_0_sva, cx_out_real_7_0_sva, j_sva_2_0);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      i_sva_3 <= 1'b0;
    end
    else if ( ~ or_tmp_90 ) begin
      i_sva_3 <= i_sva_dfm_mx0_3 & (~ while_if_land_2_lpi_1_dfm_1);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      processing_sva <= 1'b0;
    end
    else if ( fsm_output[7] ) begin
      processing_sva <= while_if_land_2_lpi_1_dfm_1 & (~ processing_sva);
    end
  end
  always @(posedge clk) begin
    if ( ~ or_tmp_109 ) begin
      cx_out_imag_4_0_sva_dfm <= ~((~((but_8_acc_14_tmp[0]) | but_8_nor_ovfl_3_sva_1))
          | but_8_and_unfl_3_sva_1);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      but_8_acc_14_psp_sva_21_1 <= 21'b000000000000000000000;
      but_8_nor_ovfl_3_sva <= 1'b0;
      but_8_and_unfl_3_sva <= 1'b0;
      but_8_acc_12_psp_sva_21_1 <= 21'b000000000000000000000;
      but_8_nor_ovfl_1_sva <= 1'b0;
      but_8_and_unfl_1_sva <= 1'b0;
      but_8_acc_13_psp_sva_21_1 <= 21'b000000000000000000000;
      but_8_nor_ovfl_2_sva <= 1'b0;
      but_8_and_unfl_2_sva <= 1'b0;
      but_8_acc_psp_sva_21_1 <= 21'b000000000000000000000;
      but_8_nor_ovfl_sva <= 1'b0;
      but_8_and_unfl_sva <= 1'b0;
      but_7_acc_14_psp_sva_23 <= 1'b0;
      but_4_acc_14_psp_sva_23 <= 1'b0;
      but_4_acc_13_psp_sva_23 <= 1'b0;
    end
    else begin
      but_8_acc_14_psp_sva_21_1 <= but_8_acc_14_tmp[21:1];
      but_8_nor_ovfl_3_sva <= but_8_nor_ovfl_3_sva_1;
      but_8_and_unfl_3_sva <= but_8_and_unfl_3_sva_1;
      but_8_acc_12_psp_sva_21_1 <= but_8_acc_12_tmp[21:1];
      but_8_nor_ovfl_1_sva <= but_8_nor_ovfl_1_sva_1;
      but_8_and_unfl_1_sva <= but_8_and_unfl_1_sva_1;
      but_8_acc_13_psp_sva_21_1 <= but_8_acc_13_tmp[21:1];
      but_8_nor_ovfl_2_sva <= but_8_nor_ovfl_2_sva_1;
      but_8_and_unfl_2_sva <= but_8_and_unfl_2_sva_1;
      but_8_acc_psp_sva_21_1 <= but_8_acc_tmp[21:1];
      but_8_nor_ovfl_sva <= but_8_nor_ovfl_sva_1;
      but_8_and_unfl_sva <= but_8_and_unfl_sva_1;
      but_7_acc_14_psp_sva_23 <= but_7_acc_14_psp_sva_1[23];
      but_4_acc_14_psp_sva_23 <= but_4_acc_14_psp_sva_1[23];
      but_4_acc_13_psp_sva_23 <= but_4_acc_13_psp_sva_1[23];
    end
  end
  always @(posedge clk) begin
    but_7_but_7_nor_11_itm <= ~((~((but_7_acc_14_psp_sva_1[0]) | but_7_nor_ovfl_3_sva_1))
        | but_7_and_unfl_3_sva_1);
    but_7_but_7_nor_10_itm <= ~(MUX_v_21_2_2(but_7_nor_18_nl, 21'b111111111111111111111,
        but_7_and_unfl_3_sva_1));
    but_10_mul_2_psp_sva <= nl_but_10_mul_2_psp_sva[23:0];
    but_10_mul_1_psp_sva <= nl_but_10_mul_1_psp_sva[23:0];
    but_4_conc_11_ncse_0_sva <= ~((~((but_4_acc_14_psp_sva_1[0]) | but_4_nor_ovfl_3_sva_1))
        | but_4_and_unfl_3_sva_1);
    but_4_conc_11_ncse_21_1_sva <= ~(MUX_v_21_2_2(but_4_nor_18_nl, 21'b111111111111111111111,
        but_4_and_unfl_3_sva_1));
    but_4_conc_10_ncse_0_sva <= ~((~((but_4_acc_13_psp_sva_1[0]) | but_4_nor_ovfl_2_sva_1))
        | but_4_and_unfl_2_sva_1);
    but_4_conc_10_ncse_21_1_sva <= ~(MUX_v_21_2_2(but_4_nor_15_nl, 21'b111111111111111111111,
        but_4_and_unfl_2_sva_1));
    reg_but_11_mul_1_psp_ftd <= z_out_4[27:21];
    reg_but_11_acc_15_cse <= readslicef_30_29_1(acc_4_nl);
    reg_but_11_acc_14_cse <= readslicef_30_29_1(acc_5_nl);
    but_11_acc_13_itm <= nl_but_11_acc_13_itm[28:0];
    but_11_acc_12_itm <= nl_but_11_acc_12_itm[28:0];
    reg_but_9_acc_14_cse <= readslicef_30_29_1(acc_6_nl);
  end
  always @(posedge clk) begin
    if ( ~ or_tmp_109 ) begin
      cx_out_imag_0_0_sva_dfm <= ~((~((but_8_acc_12_tmp[0]) | but_8_nor_ovfl_1_sva_1))
          | but_8_and_unfl_1_sva_1);
    end
  end
  always @(posedge clk) begin
    if ( ~ or_tmp_109 ) begin
      cx_out_real_4_0_sva_dfm <= ~((~((but_8_acc_13_tmp[0]) | but_8_nor_ovfl_2_sva_1))
          | but_8_and_unfl_2_sva_1);
    end
  end
  always @(posedge clk) begin
    if ( ~ or_tmp_109 ) begin
      cx_out_real_0_0_sva_dfm <= ~((~((but_8_acc_tmp[0]) | but_8_nor_ovfl_sva_1))
          | but_8_and_unfl_sva_1);
    end
  end
  always @(posedge clk) begin
    if ( ~ or_tmp_109 ) begin
      but_8_acc_14_psp_lpi_1_dfm_23 <= but_8_acc_14_tmp[23];
    end
  end
  always @(posedge clk) begin
    if ( ~ or_tmp_109 ) begin
      but_8_acc_13_psp_lpi_1_dfm_23 <= but_8_acc_13_tmp[23];
    end
  end
  always @(posedge clk) begin
    if ( ~ or_tmp_109 ) begin
      but_8_acc_12_psp_lpi_1_dfm_23 <= but_8_acc_12_tmp[23];
    end
  end
  always @(posedge clk) begin
    if ( ~ or_tmp_109 ) begin
      but_8_acc_psp_lpi_1_dfm_23 <= but_8_acc_tmp[23];
    end
  end
  always @(posedge clk) begin
    if ( ~ (fsm_output[1]) ) begin
      but_7_but_7_nor_8_itm <= ~((~((but_7_acc_13_psp_sva_1[0]) | but_7_nor_ovfl_2_sva_1))
          | but_7_and_unfl_2_sva_1);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      but_7_acc_13_psp_sva_23 <= 1'b0;
    end
    else if ( ~ (fsm_output[1]) ) begin
      but_7_acc_13_psp_sva_23 <= but_7_acc_13_psp_sva_1[23];
    end
  end
  always @(posedge clk) begin
    if ( ~ (fsm_output[1]) ) begin
      but_7_but_7_nor_7_itm <= ~(MUX_v_21_2_2(but_7_nor_15_nl, 21'b111111111111111111111,
          but_7_and_unfl_2_sva_1));
    end
  end
  always @(posedge clk) begin
    if ( ~ or_tmp_120 ) begin
      but_7_conc_9_ncse_0_sva <= ~((~((but_7_acc_12_psp_sva_1[0]) | but_7_nor_ovfl_1_sva_1))
          | but_7_and_unfl_1_sva_1);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      but_7_acc_12_psp_sva_23 <= 1'b0;
    end
    else if ( ~ or_tmp_120 ) begin
      but_7_acc_12_psp_sva_23 <= but_7_acc_12_psp_sva_1[23];
    end
  end
  always @(posedge clk) begin
    if ( ~ or_tmp_120 ) begin
      but_7_conc_9_ncse_21_1_sva <= ~(MUX_v_21_2_2(but_7_nor_12_nl, 21'b111111111111111111111,
          but_7_and_unfl_1_sva_1));
    end
  end
  always @(posedge clk) begin
    if ( ~ or_tmp_123 ) begin
      but_7_conc_8_ncse_0_sva <= ~((~((but_7_acc_psp_sva_1[0]) | but_7_nor_ovfl_sva_1))
          | but_7_and_unfl_sva_1);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      but_7_acc_psp_sva_23 <= 1'b0;
    end
    else if ( ~ or_tmp_123 ) begin
      but_7_acc_psp_sva_23 <= but_7_acc_psp_sva_1[23];
    end
  end
  always @(posedge clk) begin
    if ( ~ or_tmp_123 ) begin
      but_7_conc_8_ncse_21_1_sva <= ~(MUX_v_21_2_2(but_7_nor_9_nl, 21'b111111111111111111111,
          but_7_and_unfl_sva_1));
    end
  end
  always @(posedge clk) begin
    if ( ~ or_tmp_126 ) begin
      but_5_conc_11_ncse_0_sva <= ~((~((but_5_acc_14_psp_sva_1[0]) | but_5_nor_ovfl_3_sva_1))
          | but_5_and_unfl_3_sva_1);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      but_5_acc_14_psp_sva_23 <= 1'b0;
    end
    else if ( ~ or_tmp_126 ) begin
      but_5_acc_14_psp_sva_23 <= but_5_acc_14_psp_sva_1[23];
    end
  end
  always @(posedge clk) begin
    if ( ~ or_tmp_126 ) begin
      but_5_conc_11_ncse_21_1_sva <= ~(MUX_v_21_2_2(but_5_nor_18_nl, 21'b111111111111111111111,
          but_5_and_unfl_3_sva_1));
    end
  end
  always @(posedge clk) begin
    if ( ~ or_tmp_126 ) begin
      but_5_conc_10_ncse_0_sva <= ~((~((but_5_acc_13_psp_sva_1[0]) | but_5_nor_ovfl_2_sva_1))
          | but_5_and_unfl_2_sva_1);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      but_5_acc_13_psp_sva_23 <= 1'b0;
    end
    else if ( ~ or_tmp_126 ) begin
      but_5_acc_13_psp_sva_23 <= but_5_acc_13_psp_sva_1[23];
    end
  end
  always @(posedge clk) begin
    if ( ~ or_tmp_126 ) begin
      but_5_conc_10_ncse_21_1_sva <= ~(MUX_v_21_2_2(but_5_nor_15_nl, 21'b111111111111111111111,
          but_5_and_unfl_2_sva_1));
    end
  end
  always @(posedge clk) begin
    if ( ~ and_dcpl_9 ) begin
      but_5_conc_9_ncse_0_sva <= ~((~((but_5_acc_12_psp_sva_1[0]) | but_5_nor_ovfl_1_sva_1))
          | but_5_and_unfl_1_sva_1);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      but_5_acc_12_psp_sva_23 <= 1'b0;
    end
    else if ( ~ and_dcpl_9 ) begin
      but_5_acc_12_psp_sva_23 <= but_5_acc_12_psp_sva_1[23];
    end
  end
  always @(posedge clk) begin
    if ( ~ and_dcpl_9 ) begin
      but_5_conc_9_ncse_21_1_sva <= ~(MUX_v_21_2_2(but_5_nor_12_nl, 21'b111111111111111111111,
          but_5_and_unfl_1_sva_1));
    end
  end
  always @(posedge clk) begin
    if ( ~ or_tmp_123 ) begin
      but_5_conc_8_ncse_0_sva <= ~((~((but_5_acc_psp_sva_1[0]) | but_5_nor_ovfl_sva_1))
          | but_5_and_unfl_sva_1);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      but_5_acc_psp_sva_23 <= 1'b0;
    end
    else if ( ~ or_tmp_123 ) begin
      but_5_acc_psp_sva_23 <= but_5_acc_psp_sva_1[23];
    end
  end
  always @(posedge clk) begin
    if ( ~ or_tmp_123 ) begin
      but_5_conc_8_ncse_21_1_sva <= ~(MUX_v_21_2_2(but_5_nor_9_nl, 21'b111111111111111111111,
          but_5_and_unfl_sva_1));
    end
  end
  always @(posedge clk) begin
    if ( cx_in_imag_and_cse ) begin
      cx_in_imag_3_sva <= in_img;
      cx_in_real_3_sva <= in_real;
    end
  end
  always @(posedge clk) begin
    if ( cx_in_imag_and_1_cse ) begin
      cx_in_imag_7_sva <= in_img;
      cx_in_real_7_sva <= in_real;
    end
  end
  always @(posedge clk) begin
    if ( cx_in_imag_and_2_cse ) begin
      cx_in_imag_1_sva <= in_img;
      cx_in_real_1_sva <= in_real;
    end
  end
  always @(posedge clk) begin
    if ( cx_in_imag_and_3_cse ) begin
      cx_in_imag_5_sva <= in_img;
      cx_in_real_5_sva <= in_real;
    end
  end
  always @(posedge clk) begin
    if ( cx_in_imag_and_4_cse ) begin
      cx_in_imag_2_sva <= in_img;
      cx_in_real_2_sva <= in_real;
    end
  end
  always @(posedge clk) begin
    if ( cx_in_imag_and_5_cse ) begin
      cx_in_imag_6_sva <= in_img;
      cx_in_real_6_sva <= in_real;
    end
  end
  always @(posedge clk) begin
    if ( cx_in_imag_and_6_cse ) begin
      cx_in_imag_0_sva <= in_img;
      cx_in_real_0_sva <= in_real;
    end
  end
  always @(posedge clk) begin
    if ( cx_in_imag_and_7_cse ) begin
      cx_in_imag_4_sva <= in_img;
      cx_in_real_4_sva <= in_real;
    end
  end
  always @(posedge clk) begin
    if ( or_tmp_154 ) begin
      cx_out_imag_6_0_sva_dfm <= ~((~((but_10_acc_14_psp_sva_1[0]) | but_10_nor_ovfl_3_sva_1))
          | but_10_and_unfl_3_sva_1);
      cx_out_imag_6_21_1_sva_dfm <= ~(MUX_v_21_2_2(but_10_nor_18_nl, 21'b111111111111111111111,
          but_10_and_unfl_3_sva_1));
      cx_out_imag_4_21_1_sva_dfm <= ~(MUX_v_21_2_2(but_8_nor_18_nl, 21'b111111111111111111111,
          but_8_and_unfl_3_sva));
      cx_out_imag_2_0_sva_dfm <= ~((~((but_10_acc_12_psp_sva_1[0]) | but_10_nor_ovfl_1_sva_1))
          | but_10_and_unfl_1_sva_1);
      cx_out_imag_2_21_1_sva_dfm <= ~(MUX_v_21_2_2(but_10_nor_12_nl, 21'b111111111111111111111,
          but_10_and_unfl_1_sva_1));
      cx_out_imag_0_21_1_sva_dfm <= ~(MUX_v_21_2_2(but_8_nor_12_nl, 21'b111111111111111111111,
          but_8_and_unfl_1_sva));
      cx_out_real_6_0_sva_dfm <= ~((~((but_10_acc_13_psp_sva_1[0]) | but_10_nor_ovfl_2_sva_1))
          | but_10_and_unfl_2_sva_1);
      cx_out_real_6_21_1_sva_dfm <= ~(MUX_v_21_2_2(but_10_nor_15_nl, 21'b111111111111111111111,
          but_10_and_unfl_2_sva_1));
      cx_out_real_4_21_1_sva_dfm <= ~(MUX_v_21_2_2(but_8_nor_15_nl, 21'b111111111111111111111,
          but_8_and_unfl_2_sva));
      cx_out_real_2_0_sva_dfm <= ~((~((but_10_acc_psp_sva_1[0]) | but_10_nor_ovfl_sva_1))
          | but_10_and_unfl_sva_1);
      cx_out_real_2_21_1_sva_dfm <= ~(MUX_v_21_2_2(but_10_nor_9_nl, 21'b111111111111111111111,
          but_10_and_unfl_sva_1));
      cx_out_real_0_21_1_sva_dfm <= ~(MUX_v_21_2_2(but_8_nor_9_nl, 21'b111111111111111111111,
          but_8_and_unfl_sva));
      but_10_acc_14_psp_lpi_1_dfm_23 <= but_10_acc_14_psp_sva_1[23];
      but_10_acc_13_psp_lpi_1_dfm_23 <= but_10_acc_13_psp_sva_1[23];
      but_10_acc_12_psp_lpi_1_dfm_23 <= but_10_acc_12_psp_sva_1[23];
      but_10_acc_psp_lpi_1_dfm_23 <= but_10_acc_psp_sva_1[23];
    end
  end
  always @(posedge clk) begin
    if ( or_tmp_170 ) begin
      cx_out_imag_7_0_sva_dfm <= but_9_but_9_nor_11_cse;
      cx_out_imag_7_21_1_sva_dfm <= but_9_but_9_nor_10_cse;
      cx_out_imag_3_0_sva_dfm <= but_9_but_9_nor_5_cse;
      cx_out_imag_3_21_1_sva_dfm <= but_9_but_9_nor_4_cse;
      cx_out_real_7_0_sva_dfm <= ~((~((but_11_acc_8_psp_1_sva_1[0]) | but_11_nor_ovfl_2_sva_1))
          | but_11_and_unfl_2_sva_1);
      cx_out_real_7_21_1_sva_dfm <= ~(MUX_v_21_2_2(but_11_nor_15_nl, 21'b111111111111111111111,
          but_11_and_unfl_2_sva_1));
      cx_out_real_3_0_sva_dfm <= ~((~((but_11_acc_2_psp_1_sva_1[0]) | but_11_nor_ovfl_sva_1))
          | but_11_and_unfl_sva_1);
      cx_out_real_3_21_1_sva_dfm <= ~(MUX_v_21_2_2(but_11_nor_9_nl, 21'b111111111111111111111,
          but_11_and_unfl_sva_1));
      but_11_acc_11_psp_1_lpi_1_dfm_24 <= z_out_9[24];
      but_11_acc_8_psp_1_lpi_1_dfm_24 <= but_11_acc_8_psp_1_sva_1[24];
      but_11_acc_5_psp_1_lpi_1_dfm_24 <= z_out_10[24];
      but_11_acc_2_psp_1_lpi_1_dfm_24 <= but_11_acc_2_psp_1_sva_1[24];
    end
  end
  always @(posedge clk) begin
    if ( or_tmp_182 ) begin
      cx_out_real_5_0_sva_dfm <= but_9_but_9_nor_11_cse;
      cx_out_real_5_21_1_sva_dfm <= but_9_but_9_nor_10_cse;
      cx_out_real_1_0_sva_dfm <= but_9_but_9_nor_5_cse;
      cx_out_real_1_21_1_sva_dfm <= but_9_but_9_nor_4_cse;
      but_9_acc_8_psp_1_lpi_1_dfm_24 <= z_out_9[24];
      but_9_acc_2_psp_1_lpi_1_dfm_24 <= z_out_10[24];
    end
  end
  always @(posedge clk) begin
    if ( (fsm_output[7]) | but_11_and_18_rgt ) begin
      reg_but_11_mul_1_psp_ftd_1 <= MUX_v_21_2_2(cx_out_imag_0_21_1_sva_dfm, (z_out_4[20:0]),
          but_11_and_18_rgt);
    end
  end
  always @(posedge clk) begin
    if ( ~((fsm_output[5:4]!=2'b00)) ) begin
      but_9_mul_3_psp_sva <= z_out_4;
    end
  end
  assign but_7_nor_18_nl = ~(MUX_v_21_2_2((but_7_acc_14_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_7_nor_ovfl_3_sva_1));
  assign but_6_nor_15_nl = ~(MUX_v_21_2_2((but_6_acc_13_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_6_nor_ovfl_2_sva_1));
  assign but_10_but_6_or_2_nl = MUX_v_21_2_2(but_6_nor_15_nl, 21'b111111111111111111111,
      but_6_and_unfl_2_sva_1);
  assign but_10_but_6_or_3_nl = (~((but_6_acc_13_psp_sva_1[0]) | but_6_nor_ovfl_2_sva_1))
      | but_6_and_unfl_2_sva_1;
  assign nl_but_10_mul_2_psp_sva  = conv_s2s_23_24({(~ (but_6_acc_13_psp_sva_1[23]))
      , but_10_but_6_or_2_nl , but_10_but_6_or_3_nl}) + 24'b000000000000000000000001;
  assign but_6_nor_18_nl = ~(MUX_v_21_2_2((but_6_acc_14_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_6_nor_ovfl_3_sva_1));
  assign but_10_but_6_or_nl = MUX_v_21_2_2(but_6_nor_18_nl, 21'b111111111111111111111,
      but_6_and_unfl_3_sva_1);
  assign but_10_but_6_or_1_nl = (~((but_6_acc_14_psp_sva_1[0]) | but_6_nor_ovfl_3_sva_1))
      | but_6_and_unfl_3_sva_1;
  assign nl_but_10_mul_1_psp_sva  = conv_s2s_23_24({(~ (but_6_acc_14_psp_sva_1[23]))
      , but_10_but_6_or_nl , but_10_but_6_or_1_nl}) + 24'b000000000000000000000001;
  assign but_4_nor_18_nl = ~(MUX_v_21_2_2((but_4_acc_14_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_4_nor_ovfl_3_sva_1));
  assign but_4_nor_15_nl = ~(MUX_v_21_2_2((but_4_acc_13_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_4_nor_ovfl_2_sva_1));
  assign but_11_mux_30_nl = MUX_v_7_2_2((~ (z_out_4[27:21])), reg_but_11_mul_1_psp_ftd,
      fsm_output[5]);
  assign but_11_mux_31_nl = MUX_v_21_2_2((~ (z_out_4[20:0])), reg_but_11_mul_1_psp_ftd_1,
      fsm_output[5]);
  assign but_11_mux_32_nl = MUX_v_7_2_2((~ reg_but_11_mul_1_psp_ftd), (~ (z_out_4[27:21])),
      fsm_output[5]);
  assign but_11_mux_33_nl = MUX_v_21_2_2((~ reg_but_11_mul_1_psp_ftd_1), (~ (z_out_4[20:0])),
      fsm_output[5]);
  assign nl_acc_4_nl = conv_s2u_29_30({but_11_mux_30_nl , but_11_mux_31_nl , 1'b1})
      + conv_s2u_29_30({but_11_mux_32_nl , but_11_mux_33_nl , 1'b1});
  assign acc_4_nl = nl_acc_4_nl[29:0];
  assign but_11_mux_34_nl = MUX_v_28_2_2((~ z_out_4), z_out_4, fsm_output[6]);
  assign but_11_or_27_nl = (~ (fsm_output[6])) | (fsm_output[2]);
  assign but_11_mux_35_nl = MUX_v_7_2_2(reg_but_11_mul_1_psp_ftd, (but_9_mul_3_psp_sva[27:21]),
      fsm_output[6]);
  assign but_11_mux_36_nl = MUX_v_21_2_2(reg_but_11_mul_1_psp_ftd_1, (but_9_mul_3_psp_sva[20:0]),
      fsm_output[6]);
  assign nl_acc_5_nl = conv_s2u_29_30({but_11_mux_34_nl , but_11_or_27_nl}) + conv_s2u_29_30({but_11_mux_35_nl
      , but_11_mux_36_nl , 1'b1});
  assign acc_5_nl = nl_acc_5_nl[29:0];
  assign nl_but_11_acc_13_itm  = conv_s2s_28_29(z_out_4) + conv_s2s_28_29({reg_but_11_mul_1_psp_ftd
      , reg_but_11_mul_1_psp_ftd_1});
  assign nl_but_11_acc_12_itm  = conv_s2s_28_29(z_out_4) + conv_s2s_28_29({(~ reg_but_11_mul_1_psp_ftd)
      , (~ reg_but_11_mul_1_psp_ftd_1)}) + 29'b00000000000000000000000000001;
  assign but_9_mux_22_nl = MUX_v_7_2_2((~ reg_but_11_mul_1_psp_ftd), (~ (z_out_4[27:21])),
      fsm_output[6]);
  assign but_9_mux_23_nl = MUX_v_21_2_2((~ reg_but_11_mul_1_psp_ftd_1), (~ (z_out_4[20:0])),
      fsm_output[6]);
  assign but_9_mux_24_nl = MUX_v_28_2_2(z_out_4, (~ but_9_mul_3_psp_sva), fsm_output[6]);
  assign nl_acc_6_nl = conv_s2u_29_30({but_9_mux_22_nl , but_9_mux_23_nl , 1'b1})
      + conv_s2u_29_30({but_9_mux_24_nl , 1'b1});
  assign acc_6_nl = nl_acc_6_nl[29:0];
  assign but_7_nor_15_nl = ~(MUX_v_21_2_2((but_7_acc_13_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_7_nor_ovfl_2_sva_1));
  assign but_7_nor_12_nl = ~(MUX_v_21_2_2((but_7_acc_12_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_7_nor_ovfl_1_sva_1));
  assign but_7_nor_9_nl = ~(MUX_v_21_2_2((but_7_acc_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_7_nor_ovfl_sva_1));
  assign but_5_nor_18_nl = ~(MUX_v_21_2_2((but_5_acc_14_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_5_nor_ovfl_3_sva_1));
  assign but_5_nor_15_nl = ~(MUX_v_21_2_2((but_5_acc_13_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_5_nor_ovfl_2_sva_1));
  assign but_5_nor_12_nl = ~(MUX_v_21_2_2((but_5_acc_12_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_5_nor_ovfl_1_sva_1));
  assign but_5_nor_9_nl = ~(MUX_v_21_2_2((but_5_acc_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_5_nor_ovfl_sva_1));
  assign but_10_nor_18_nl = ~(MUX_v_21_2_2((but_10_acc_14_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_10_nor_ovfl_3_sva_1));
  assign but_8_nor_18_nl = ~(MUX_v_21_2_2(but_8_acc_14_psp_sva_21_1, 21'b111111111111111111111,
      but_8_nor_ovfl_3_sva));
  assign but_10_nor_12_nl = ~(MUX_v_21_2_2((but_10_acc_12_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_10_nor_ovfl_1_sva_1));
  assign but_8_nor_12_nl = ~(MUX_v_21_2_2(but_8_acc_12_psp_sva_21_1, 21'b111111111111111111111,
      but_8_nor_ovfl_1_sva));
  assign but_10_nor_15_nl = ~(MUX_v_21_2_2((but_10_acc_13_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_10_nor_ovfl_2_sva_1));
  assign but_8_nor_15_nl = ~(MUX_v_21_2_2(but_8_acc_13_psp_sva_21_1, 21'b111111111111111111111,
      but_8_nor_ovfl_2_sva));
  assign but_10_nor_9_nl = ~(MUX_v_21_2_2((but_10_acc_psp_sva_1[21:1]), 21'b111111111111111111111,
      but_10_nor_ovfl_sva_1));
  assign but_8_nor_9_nl = ~(MUX_v_21_2_2(but_8_acc_psp_sva_21_1, 21'b111111111111111111111,
      but_8_nor_ovfl_sva));
  assign but_11_nor_15_nl = ~(MUX_v_21_2_2((but_11_acc_8_psp_1_sva_1[21:1]), 21'b111111111111111111111,
      but_11_nor_ovfl_2_sva_1));
  assign but_11_nor_9_nl = ~(MUX_v_21_2_2((but_11_acc_2_psp_1_sva_1[21:1]), 21'b111111111111111111111,
      but_11_nor_ovfl_sva_1));
  assign but_2_mux1h_6_nl = MUX1HOT_v_28_3_2((signext_28_19(cx_in_imag_1_sva[22:4])),
      (signext_28_20(but_11_acc_12_itm[28:9])), i_sva_31_4, {(fsm_output[0]) , (fsm_output[3])
      , (fsm_output[7])});
  assign but_2_mux1h_7_nl = MUX1HOT_s_1_3_2((cx_in_imag_1_sva[3]), (but_11_acc_12_itm[8]),
      i_sva_3, {(fsm_output[0]) , (fsm_output[3]) , (fsm_output[7])});
  assign but_2_mux1h_8_nl = MUX1HOT_v_3_3_2((cx_in_imag_1_sva[2:0]), (but_11_acc_12_itm[7:5]),
      i_sva_2_0, {(fsm_output[0]) , (fsm_output[3]) , (fsm_output[7])});
  assign but_2_or_2_nl = (~((fsm_output[3]) | (fsm_output[7]))) | (fsm_output[0]);
  assign but_2_mux_7_nl = MUX_s_1_2_2((~ (cx_in_imag_5_sva[22])), but_5_acc_13_psp_sva_23,
      fsm_output[3]);
  assign but_2_but_2_and_2_nl = but_2_mux_7_nl & (~ (fsm_output[7]));
  assign but_2_mux_8_nl = MUX_v_21_2_2((~ (cx_in_imag_5_sva[21:1])), but_5_conc_10_ncse_21_1_sva,
      fsm_output[3]);
  assign not_134_nl = ~ (fsm_output[7]);
  assign but_2_but_2_and_3_nl = MUX_v_21_2_2(21'b000000000000000000000, but_2_mux_8_nl,
      not_134_nl);
  assign but_2_mux_9_nl = MUX_s_1_2_2((~ (cx_in_imag_5_sva[0])), but_5_conc_10_ncse_0_sva,
      fsm_output[3]);
  assign but_2_but_2_or_1_nl = but_2_mux_9_nl | (fsm_output[7]);
  assign nl_acc_nl = ({but_2_mux1h_6_nl , but_2_mux1h_7_nl , but_2_mux1h_8_nl , but_2_or_2_nl})
      + conv_s2u_24_33({but_2_but_2_and_2_nl , but_2_but_2_and_3_nl , but_2_but_2_or_1_nl
      , 1'b1});
  assign acc_nl = nl_acc_nl[32:0];
  assign z_out = readslicef_33_32_1(acc_nl);
  assign but_2_mux_10_nl = MUX_v_28_2_2((signext_28_19(cx_in_real_1_sva[22:4])),
      j_sva_31_4, fsm_output[7]);
  assign but_2_mux_11_nl = MUX_s_1_2_2((cx_in_real_1_sva[3]), j_sva_3, fsm_output[7]);
  assign but_2_mux_12_nl = MUX_v_3_2_2((cx_in_real_1_sva[2:0]), j_sva_2_0, fsm_output[7]);
  assign but_2_or_3_nl = (~ (fsm_output[7])) | (fsm_output[0]);
  assign but_2_mux_13_nl = MUX_v_23_2_2((~ cx_in_real_5_sva), 23'b00000000000000000000001,
      fsm_output[7]);
  assign nl_acc_1_nl = ({but_2_mux_10_nl , but_2_mux_11_nl , but_2_mux_12_nl , but_2_or_3_nl})
      + conv_s2u_24_33({but_2_mux_13_nl , 1'b1});
  assign acc_1_nl = nl_acc_1_nl[32:0];
  assign z_out_1 = readslicef_33_32_1(acc_1_nl);
  assign but_11_mux_26_nl = MUX_v_24_2_2((reg_but_11_acc_14_cse[28:5]), (reg_but_11_acc_15_cse[28:5]),
      fsm_output[6]);
  assign but_11_mux_27_nl = MUX_s_1_2_2(but_5_acc_13_psp_sva_23, but_5_acc_psp_sva_23,
      fsm_output[6]);
  assign but_11_mux_28_nl = MUX_v_21_2_2(but_5_conc_10_ncse_21_1_sva, but_5_conc_8_ncse_21_1_sva,
      fsm_output[6]);
  assign but_11_mux_29_nl = MUX_s_1_2_2(but_5_conc_10_ncse_0_sva, but_5_conc_8_ncse_0_sva,
      fsm_output[6]);
  assign nl_z_out_2 = conv_s2u_24_25(but_11_mux_26_nl) + conv_s2u_23_25({but_11_mux_27_nl
      , but_11_mux_28_nl , but_11_mux_29_nl});
  assign z_out_2 = nl_z_out_2[24:0];
  assign but_9_mux_18_nl = MUX_v_24_2_2((reg_but_9_acc_14_cse[28:5]), (reg_but_11_acc_14_cse[28:5]),
      fsm_output[7]);
  assign but_9_mux_19_nl = MUX_s_1_2_2(but_5_acc_psp_sva_23, but_5_acc_12_psp_sva_23,
      fsm_output[7]);
  assign but_9_mux_20_nl = MUX_v_21_2_2(but_5_conc_8_ncse_21_1_sva, but_5_conc_9_ncse_21_1_sva,
      fsm_output[7]);
  assign but_9_mux_21_nl = MUX_s_1_2_2(but_5_conc_8_ncse_0_sva, but_5_conc_9_ncse_0_sva,
      fsm_output[7]);
  assign nl_z_out_3 = conv_s2u_24_25(but_9_mux_18_nl) + conv_s2u_23_25({but_9_mux_19_nl
      , but_9_mux_20_nl , but_9_mux_21_nl});
  assign z_out_3 = nl_z_out_3[24:0];
  assign but_11_or_26_nl = (fsm_output[4:3]!=2'b00);
  assign but_11_but_11_mux_4_nl = MUX_v_5_2_2(5'b10100, 5'b01011, but_11_or_26_nl);
  assign but_11_mux1h_35_nl = MUX1HOT_s_1_4_2(but_7_acc_14_psp_sva_23, but_7_acc_psp_sva_23,
      but_7_acc_12_psp_sva_23, but_7_acc_13_psp_sva_23, {(fsm_output[1]) , but_11_or_19_cse
      , but_11_or_20_cse , (fsm_output[2])});
  assign but_11_mux1h_36_nl = MUX1HOT_v_21_4_2(but_7_but_7_nor_10_itm, but_7_conc_8_ncse_21_1_sva,
      but_7_conc_9_ncse_21_1_sva, but_7_but_7_nor_7_itm, {(fsm_output[1]) , but_11_or_19_cse
      , but_11_or_20_cse , (fsm_output[2])});
  assign but_11_mux1h_37_nl = MUX1HOT_s_1_4_2(but_7_but_7_nor_11_itm, but_7_conc_8_ncse_0_sva,
      but_7_conc_9_ncse_0_sva, but_7_but_7_nor_8_itm, {(fsm_output[1]) , but_11_or_19_cse
      , but_11_or_20_cse , (fsm_output[2])});
  assign nl_z_out_4 = $signed(({but_11_but_11_mux_4_nl , 1'b1})) * $signed(({but_11_mux1h_35_nl
      , but_11_mux1h_36_nl , but_11_mux1h_37_nl}));
  assign z_out_4 = nl_z_out_4[27:0];
  assign but_11_mux_37_nl = MUX_v_29_2_2(reg_but_11_acc_15_cse, reg_but_9_acc_14_cse,
      fsm_output[7]);
  assign but_11_mux_38_nl = MUX_s_1_2_2(but_5_acc_14_psp_sva_23, but_5_acc_12_psp_sva_23,
      fsm_output[7]);
  assign but_11_mux_39_nl = MUX_v_21_2_2(but_5_conc_11_ncse_21_1_sva, but_5_conc_9_ncse_21_1_sva,
      fsm_output[7]);
  assign but_11_mux_40_nl = MUX_s_1_2_2(but_5_conc_11_ncse_0_sva, but_5_conc_9_ncse_0_sva,
      fsm_output[7]);
  assign nl_acc_7_nl = conv_s2u_30_31({but_11_mux_37_nl , 1'b1}) + conv_s2u_29_31({but_11_mux_38_nl
      , but_11_mux_39_nl , but_11_mux_40_nl , 6'b000001});
  assign acc_7_nl = nl_acc_7_nl[30:0];
  assign z_out_8 = readslicef_31_30_1(acc_7_nl);
  assign or_287_nl = (fsm_output[3]) | (fsm_output[7]);
  assign mux_23_nl = MUX_v_25_2_2(z_out_3, (z_out_8[29:5]), or_287_nl);
  assign but_11_and_19_nl = (z_out_8[4]) & ((z_out_8[0]) | (z_out_8[1]) | (z_out_8[2])
      | (z_out_8[3]) | (~ (z_out_8[29])));
  assign but_9_and_17_nl = (reg_but_9_acc_14_cse[4]) & ((reg_but_9_acc_14_cse[3:0]!=4'b0000)
      | (~ (z_out_3[24])));
  assign but_11_but_11_mux_5_nl = MUX_s_1_2_2(but_11_and_19_nl, but_9_and_17_nl,
      fsm_output[6]);
  assign nl_z_out_9 = mux_23_nl + conv_u2u_1_25(but_11_but_11_mux_5_nl);
  assign z_out_9 = nl_z_out_9[24:0];
  assign but_11_mux1h_38_nl = MUX1HOT_v_25_3_2(but_11_acc_17_psp_1, z_out_2, z_out_3,
      {(fsm_output[3]) , (fsm_output[6]) , (fsm_output[7])});
  assign but_11_and_20_nl = (but_11_acc_13_itm[4]) & ((but_11_acc_13_itm[3:0]!=4'b0000)
      | (~ (but_11_acc_17_psp_1[24])));
  assign but_9_and_18_nl = (reg_but_11_acc_15_cse[4]) & ((reg_but_11_acc_15_cse[3:0]!=4'b0000)
      | (~ (z_out_2[24])));
  assign but_9_and_19_nl = (reg_but_11_acc_14_cse[4]) & ((reg_but_11_acc_14_cse[3:0]!=4'b0000)
      | (~ (z_out_3[24])));
  assign but_11_mux1h_39_nl = MUX1HOT_s_1_3_2(but_11_and_20_nl, but_9_and_18_nl,
      but_9_and_19_nl, {(fsm_output[3]) , (fsm_output[6]) , (fsm_output[7])});
  assign nl_z_out_10 = but_11_mux1h_38_nl + conv_u2u_1_25(but_11_mux1h_39_nl);
  assign z_out_10 = nl_z_out_10[24:0];

  function automatic  MUX1HOT_s_1_3_2;
    input  input_2;
    input  input_1;
    input  input_0;
    input [2:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic  MUX1HOT_s_1_4_2;
    input  input_3;
    input  input_2;
    input  input_1;
    input  input_0;
    input [3:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    result = result | (input_3 & sel[3]);
    MUX1HOT_s_1_4_2 = result;
  end
  endfunction


  function automatic [20:0] MUX1HOT_v_21_4_2;
    input [20:0] input_3;
    input [20:0] input_2;
    input [20:0] input_1;
    input [20:0] input_0;
    input [3:0] sel;
    reg [20:0] result;
  begin
    result = input_0 & {21{sel[0]}};
    result = result | (input_1 & {21{sel[1]}});
    result = result | (input_2 & {21{sel[2]}});
    result = result | (input_3 & {21{sel[3]}});
    MUX1HOT_v_21_4_2 = result;
  end
  endfunction


  function automatic [24:0] MUX1HOT_v_25_3_2;
    input [24:0] input_2;
    input [24:0] input_1;
    input [24:0] input_0;
    input [2:0] sel;
    reg [24:0] result;
  begin
    result = input_0 & {25{sel[0]}};
    result = result | (input_1 & {25{sel[1]}});
    result = result | (input_2 & {25{sel[2]}});
    MUX1HOT_v_25_3_2 = result;
  end
  endfunction


  function automatic [27:0] MUX1HOT_v_28_3_2;
    input [27:0] input_2;
    input [27:0] input_1;
    input [27:0] input_0;
    input [2:0] sel;
    reg [27:0] result;
  begin
    result = input_0 & {28{sel[0]}};
    result = result | (input_1 & {28{sel[1]}});
    result = result | (input_2 & {28{sel[2]}});
    MUX1HOT_v_28_3_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_3_2;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [2:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | (input_1 & {3{sel[1]}});
    result = result | (input_2 & {3{sel[2]}});
    MUX1HOT_v_3_3_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_8_2;
    input  input_0;
    input  input_1;
    input  input_2;
    input  input_3;
    input  input_4;
    input  input_5;
    input  input_6;
    input  input_7;
    input [2:0] sel;
    reg  result;
  begin
    case (sel)
      3'b000 : begin
        result = input_0;
      end
      3'b001 : begin
        result = input_1;
      end
      3'b010 : begin
        result = input_2;
      end
      3'b011 : begin
        result = input_3;
      end
      3'b100 : begin
        result = input_4;
      end
      3'b101 : begin
        result = input_5;
      end
      3'b110 : begin
        result = input_6;
      end
      default : begin
        result = input_7;
      end
    endcase
    MUX_s_1_8_2 = result;
  end
  endfunction


  function automatic [20:0] MUX_v_21_2_2;
    input [20:0] input_0;
    input [20:0] input_1;
    input  sel;
    reg [20:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_21_2_2 = result;
  end
  endfunction


  function automatic [20:0] MUX_v_21_8_2;
    input [20:0] input_0;
    input [20:0] input_1;
    input [20:0] input_2;
    input [20:0] input_3;
    input [20:0] input_4;
    input [20:0] input_5;
    input [20:0] input_6;
    input [20:0] input_7;
    input [2:0] sel;
    reg [20:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = input_0;
      end
      3'b001 : begin
        result = input_1;
      end
      3'b010 : begin
        result = input_2;
      end
      3'b011 : begin
        result = input_3;
      end
      3'b100 : begin
        result = input_4;
      end
      3'b101 : begin
        result = input_5;
      end
      3'b110 : begin
        result = input_6;
      end
      default : begin
        result = input_7;
      end
    endcase
    MUX_v_21_8_2 = result;
  end
  endfunction


  function automatic [22:0] MUX_v_23_2_2;
    input [22:0] input_0;
    input [22:0] input_1;
    input  sel;
    reg [22:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_23_2_2 = result;
  end
  endfunction


  function automatic [23:0] MUX_v_24_2_2;
    input [23:0] input_0;
    input [23:0] input_1;
    input  sel;
    reg [23:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_24_2_2 = result;
  end
  endfunction


  function automatic [24:0] MUX_v_25_2_2;
    input [24:0] input_0;
    input [24:0] input_1;
    input  sel;
    reg [24:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_25_2_2 = result;
  end
  endfunction


  function automatic [27:0] MUX_v_28_2_2;
    input [27:0] input_0;
    input [27:0] input_1;
    input  sel;
    reg [27:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_28_2_2 = result;
  end
  endfunction


  function automatic [28:0] MUX_v_29_2_2;
    input [28:0] input_0;
    input [28:0] input_1;
    input  sel;
    reg [28:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_29_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input  sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input  sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction


  function automatic [6:0] MUX_v_7_2_2;
    input [6:0] input_0;
    input [6:0] input_1;
    input  sel;
    reg [6:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_7_2_2 = result;
  end
  endfunction


  function automatic [28:0] readslicef_30_29_1;
    input [29:0] vector;
    reg [29:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_30_29_1 = tmp[28:0];
  end
  endfunction


  function automatic [29:0] readslicef_31_30_1;
    input [30:0] vector;
    reg [30:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_31_30_1 = tmp[29:0];
  end
  endfunction


  function automatic [31:0] readslicef_33_32_1;
    input [32:0] vector;
    reg [32:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_33_32_1 = tmp[31:0];
  end
  endfunction


  function automatic [27:0] signext_28_19;
    input [18:0] vector;
  begin
    signext_28_19= {{9{vector[18]}}, vector};
  end
  endfunction


  function automatic [27:0] signext_28_20;
    input [19:0] vector;
  begin
    signext_28_20= {{8{vector[19]}}, vector};
  end
  endfunction


  function automatic [23:0] conv_s2s_23_24 ;
    input [22:0]  vector ;
  begin
    conv_s2s_23_24 = {vector[22], vector};
  end
  endfunction


  function automatic [28:0] conv_s2s_28_29 ;
    input [27:0]  vector ;
  begin
    conv_s2s_28_29 = {vector[27], vector};
  end
  endfunction


  function automatic [23:0] conv_s2u_23_24 ;
    input [22:0]  vector ;
  begin
    conv_s2u_23_24 = {vector[22], vector};
  end
  endfunction


  function automatic [24:0] conv_s2u_23_25 ;
    input [22:0]  vector ;
  begin
    conv_s2u_23_25 = {{2{vector[22]}}, vector};
  end
  endfunction


  function automatic [24:0] conv_s2u_24_25 ;
    input [23:0]  vector ;
  begin
    conv_s2u_24_25 = {vector[23], vector};
  end
  endfunction


  function automatic [32:0] conv_s2u_24_33 ;
    input [23:0]  vector ;
  begin
    conv_s2u_24_33 = {{9{vector[23]}}, vector};
  end
  endfunction


  function automatic [29:0] conv_s2u_29_30 ;
    input [28:0]  vector ;
  begin
    conv_s2u_29_30 = {vector[28], vector};
  end
  endfunction


  function automatic [30:0] conv_s2u_29_31 ;
    input [28:0]  vector ;
  begin
    conv_s2u_29_31 = {{2{vector[28]}}, vector};
  end
  endfunction


  function automatic [30:0] conv_s2u_30_31 ;
    input [29:0]  vector ;
  begin
    conv_s2u_30_31 = {vector[29], vector};
  end
  endfunction


  function automatic [24:0] conv_u2s_1_25 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_25 = {{24{1'b0}}, vector};
  end
  endfunction


  function automatic [24:0] conv_u2u_1_25 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_25 = {{24{1'b0}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    FFT
// ------------------------------------------------------------------


module FFT (
  clk, rst, data_valid_source, data_req_sink, in_real, in_img, out_real, out_img,
      data_valid_sink, data_req_source
);
  input clk;
  input rst;
  input data_valid_source;
  input data_req_sink;
  input [22:0] in_real;
  input [22:0] in_img;
  output [22:0] out_real;
  output [22:0] out_img;
  output data_valid_sink;
  output data_req_source;



  // Interconnect Declarations for Component Instantiations 
  FFT_FFT_COMPORTEMENT FFT_COMPORTEMENT_inst (
      .clk(clk),
      .rst(rst),
      .data_valid_source(data_valid_source),
      .data_req_sink(data_req_sink),
      .in_real(in_real),
      .in_img(in_img),
      .out_real(out_real),
      .out_img(out_img),
      .data_valid_sink(data_valid_sink),
      .data_req_source(data_req_source)
    );
endmodule



